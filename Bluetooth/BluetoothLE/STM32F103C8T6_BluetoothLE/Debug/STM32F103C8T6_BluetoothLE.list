
STM32F103C8T6_BluetoothLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036dc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080037e8  080037e8  000047e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003888  08003888  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003888  08003888  00004888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003890  08003890  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003890  08003890  00004890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003894  08003894  00004894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003898  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  2000005c  080038f4  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  080038f4  0000528c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c57e  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e13  00000000  00000000  00011603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  00013418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000097d  00000000  00000000  00014038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c00  00000000  00000000  000149b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e2a6  00000000  00000000  0002c5b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a56a  00000000  00000000  0003a85b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4dc5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000379c  00000000  00000000  000c4e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  000c85a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080037d0 	.word	0x080037d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080037d0 	.word	0x080037d0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <send_gpio_state>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void send_gpio_state()
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0
    uint8_t state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9); // Đọc trạng thái PB9
 8000162:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000166:	480d      	ldr	r0, [pc, #52]	@ (800019c <send_gpio_state+0x40>)
 8000168:	f000 ff88 	bl	800107c <HAL_GPIO_ReadPin>
 800016c:	4603      	mov	r3, r0
 800016e:	77fb      	strb	r3, [r7, #31]
    char message[20];

    int len = snprintf(message, sizeof(message), "PB9 State: %d\r\n", state); // Định dạng thông điệp một cách an toàn
 8000170:	7ffb      	ldrb	r3, [r7, #31]
 8000172:	1d38      	adds	r0, r7, #4
 8000174:	4a0a      	ldr	r2, [pc, #40]	@ (80001a0 <send_gpio_state+0x44>)
 8000176:	2114      	movs	r1, #20
 8000178:	f002 fe66 	bl	8002e48 <sniprintf>
 800017c:	61b8      	str	r0, [r7, #24]
    if (len > 0) // Đảm bảo thông điệp đã được định dạng đúng
 800017e:	69bb      	ldr	r3, [r7, #24]
 8000180:	2b00      	cmp	r3, #0
 8000182:	dd07      	ble.n	8000194 <send_gpio_state+0x38>
    {
        HAL_UART_Transmit(&huart2, (uint8_t*)message, len, HAL_MAX_DELAY); // Gửi qua UART2
 8000184:	69bb      	ldr	r3, [r7, #24]
 8000186:	b29a      	uxth	r2, r3
 8000188:	1d39      	adds	r1, r7, #4
 800018a:	f04f 33ff 	mov.w	r3, #4294967295
 800018e:	4805      	ldr	r0, [pc, #20]	@ (80001a4 <send_gpio_state+0x48>)
 8000190:	f001 fffe 	bl	8002190 <HAL_UART_Transmit>
    }
}
 8000194:	bf00      	nop
 8000196:	3720      	adds	r7, #32
 8000198:	46bd      	mov	sp, r7
 800019a:	bd80      	pop	{r7, pc}
 800019c:	40010c00 	.word	0x40010c00
 80001a0:	080037e8 	.word	0x080037e8
 80001a4:	200000c0 	.word	0x200000c0

080001a8 <main>:


int main(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ac:	f000 fb9c 	bl	80008e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b0:	f000 f834 	bl	800021c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b4:	f000 f8f0 	bl	8000398 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001b8:	f000 f8c4 	bl	8000344 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80001bc:	f000 f874 	bl	80002a8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(200);
 80001c0:	20c8      	movs	r0, #200	@ 0xc8
 80001c2:	f000 fbf3 	bl	80009ac <HAL_Delay>
  HAL_GPIO_WritePin(BluetoothReset_GPIO_Port, BluetoothReset_Pin, SET);
 80001c6:	2201      	movs	r2, #1
 80001c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80001cc:	480f      	ldr	r0, [pc, #60]	@ (800020c <main+0x64>)
 80001ce:	f000 ff6c 	bl	80010aa <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80001d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001d6:	f000 fbe9 	bl	80009ac <HAL_Delay>
  memset(buffer, 0, sizeof(buffer));
 80001da:	2232      	movs	r2, #50	@ 0x32
 80001dc:	2100      	movs	r1, #0
 80001de:	480c      	ldr	r0, [pc, #48]	@ (8000210 <main+0x68>)
 80001e0:	f002 fe66 	bl	8002eb0 <memset>
  HAL_TIM_Base_Start_IT(&htim2);
 80001e4:	480b      	ldr	r0, [pc, #44]	@ (8000214 <main+0x6c>)
 80001e6:	f001 fbd9 	bl	800199c <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80001ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000218 <main+0x70>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	68da      	ldr	r2, [r3, #12]
 80001f0:	4b09      	ldr	r3, [pc, #36]	@ (8000218 <main+0x70>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	f042 0220 	orr.w	r2, r2, #32
 80001f8:	60da      	str	r2, [r3, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  send_gpio_state();
 80001fa:	f7ff ffaf 	bl	800015c <send_gpio_state>
	  HAL_Delay(1000); // Send every 1 second
 80001fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000202:	f000 fbd3 	bl	80009ac <HAL_Delay>
	  send_gpio_state();
 8000206:	bf00      	nop
 8000208:	e7f7      	b.n	80001fa <main+0x52>
 800020a:	bf00      	nop
 800020c:	40011000 	.word	0x40011000
 8000210:	20000108 	.word	0x20000108
 8000214:	20000078 	.word	0x20000078
 8000218:	200000c0 	.word	0x200000c0

0800021c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b090      	sub	sp, #64	@ 0x40
 8000220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000222:	f107 0318 	add.w	r3, r7, #24
 8000226:	2228      	movs	r2, #40	@ 0x28
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f002 fe40 	bl	8002eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000230:	1d3b      	adds	r3, r7, #4
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
 8000236:	605a      	str	r2, [r3, #4]
 8000238:	609a      	str	r2, [r3, #8]
 800023a:	60da      	str	r2, [r3, #12]
 800023c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800023e:	2301      	movs	r3, #1
 8000240:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000242:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000246:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000248:	2300      	movs	r3, #0
 800024a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024c:	2301      	movs	r3, #1
 800024e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000250:	2302      	movs	r3, #2
 8000252:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000254:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000258:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800025a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800025e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000260:	f107 0318 	add.w	r3, r7, #24
 8000264:	4618      	mov	r0, r3
 8000266:	f000 ff39 	bl	80010dc <HAL_RCC_OscConfig>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000270:	f000 f8fe 	bl	8000470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000274:	230f      	movs	r3, #15
 8000276:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000278:	2302      	movs	r3, #2
 800027a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000280:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000284:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000286:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800028a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2102      	movs	r1, #2
 8000290:	4618      	mov	r0, r3
 8000292:	f001 f9a5 	bl	80015e0 <HAL_RCC_ClockConfig>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800029c:	f000 f8e8 	bl	8000470 <Error_Handler>
  }
}
 80002a0:	bf00      	nop
 80002a2:	3740      	adds	r7, #64	@ 0x40
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ae:	f107 0308 	add.w	r3, r7, #8
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002bc:	463b      	mov	r3, r7
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000340 <MX_TIM2_Init+0x98>)
 80002c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 80002cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000340 <MX_TIM2_Init+0x98>)
 80002ce:	f44f 7234 	mov.w	r2, #720	@ 0x2d0
 80002d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000340 <MX_TIM2_Init+0x98>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80002da:	4b19      	ldr	r3, [pc, #100]	@ (8000340 <MX_TIM2_Init+0x98>)
 80002dc:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80002e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002e2:	4b17      	ldr	r3, [pc, #92]	@ (8000340 <MX_TIM2_Init+0x98>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002e8:	4b15      	ldr	r3, [pc, #84]	@ (8000340 <MX_TIM2_Init+0x98>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002ee:	4814      	ldr	r0, [pc, #80]	@ (8000340 <MX_TIM2_Init+0x98>)
 80002f0:	f001 fb04 	bl	80018fc <HAL_TIM_Base_Init>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80002fa:	f000 f8b9 	bl	8000470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000302:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000304:	f107 0308 	add.w	r3, r7, #8
 8000308:	4619      	mov	r1, r3
 800030a:	480d      	ldr	r0, [pc, #52]	@ (8000340 <MX_TIM2_Init+0x98>)
 800030c:	f001 fc88 	bl	8001c20 <HAL_TIM_ConfigClockSource>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000316:	f000 f8ab 	bl	8000470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800031a:	2300      	movs	r3, #0
 800031c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800031e:	2300      	movs	r3, #0
 8000320:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000322:	463b      	mov	r3, r7
 8000324:	4619      	mov	r1, r3
 8000326:	4806      	ldr	r0, [pc, #24]	@ (8000340 <MX_TIM2_Init+0x98>)
 8000328:	f001 fe72 	bl	8002010 <HAL_TIMEx_MasterConfigSynchronization>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000332:	f000 f89d 	bl	8000470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	3718      	adds	r7, #24
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20000078 	.word	0x20000078

08000344 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000348:	4b11      	ldr	r3, [pc, #68]	@ (8000390 <MX_USART2_UART_Init+0x4c>)
 800034a:	4a12      	ldr	r2, [pc, #72]	@ (8000394 <MX_USART2_UART_Init+0x50>)
 800034c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800034e:	4b10      	ldr	r3, [pc, #64]	@ (8000390 <MX_USART2_UART_Init+0x4c>)
 8000350:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000354:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000356:	4b0e      	ldr	r3, [pc, #56]	@ (8000390 <MX_USART2_UART_Init+0x4c>)
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800035c:	4b0c      	ldr	r3, [pc, #48]	@ (8000390 <MX_USART2_UART_Init+0x4c>)
 800035e:	2200      	movs	r2, #0
 8000360:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000362:	4b0b      	ldr	r3, [pc, #44]	@ (8000390 <MX_USART2_UART_Init+0x4c>)
 8000364:	2200      	movs	r2, #0
 8000366:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000368:	4b09      	ldr	r3, [pc, #36]	@ (8000390 <MX_USART2_UART_Init+0x4c>)
 800036a:	220c      	movs	r2, #12
 800036c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800036e:	4b08      	ldr	r3, [pc, #32]	@ (8000390 <MX_USART2_UART_Init+0x4c>)
 8000370:	2200      	movs	r2, #0
 8000372:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000374:	4b06      	ldr	r3, [pc, #24]	@ (8000390 <MX_USART2_UART_Init+0x4c>)
 8000376:	2200      	movs	r2, #0
 8000378:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800037a:	4805      	ldr	r0, [pc, #20]	@ (8000390 <MX_USART2_UART_Init+0x4c>)
 800037c:	f001 feb8 	bl	80020f0 <HAL_UART_Init>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000386:	f000 f873 	bl	8000470 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	200000c0 	.word	0x200000c0
 8000394:	40004400 	.word	0x40004400

08000398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b088      	sub	sp, #32
 800039c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039e:	f107 0310 	add.w	r3, r7, #16
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ac:	4b2d      	ldr	r3, [pc, #180]	@ (8000464 <MX_GPIO_Init+0xcc>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a2c      	ldr	r2, [pc, #176]	@ (8000464 <MX_GPIO_Init+0xcc>)
 80003b2:	f043 0310 	orr.w	r3, r3, #16
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000464 <MX_GPIO_Init+0xcc>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0310 	and.w	r3, r3, #16
 80003c0:	60fb      	str	r3, [r7, #12]
 80003c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003c4:	4b27      	ldr	r3, [pc, #156]	@ (8000464 <MX_GPIO_Init+0xcc>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a26      	ldr	r2, [pc, #152]	@ (8000464 <MX_GPIO_Init+0xcc>)
 80003ca:	f043 0320 	orr.w	r3, r3, #32
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	4b24      	ldr	r3, [pc, #144]	@ (8000464 <MX_GPIO_Init+0xcc>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f003 0320 	and.w	r3, r3, #32
 80003d8:	60bb      	str	r3, [r7, #8]
 80003da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003dc:	4b21      	ldr	r3, [pc, #132]	@ (8000464 <MX_GPIO_Init+0xcc>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	4a20      	ldr	r2, [pc, #128]	@ (8000464 <MX_GPIO_Init+0xcc>)
 80003e2:	f043 0304 	orr.w	r3, r3, #4
 80003e6:	6193      	str	r3, [r2, #24]
 80003e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000464 <MX_GPIO_Init+0xcc>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	f003 0304 	and.w	r3, r3, #4
 80003f0:	607b      	str	r3, [r7, #4]
 80003f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000464 <MX_GPIO_Init+0xcc>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a1a      	ldr	r2, [pc, #104]	@ (8000464 <MX_GPIO_Init+0xcc>)
 80003fa:	f043 0308 	orr.w	r3, r3, #8
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b18      	ldr	r3, [pc, #96]	@ (8000464 <MX_GPIO_Init+0xcc>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0308 	and.w	r3, r3, #8
 8000408:	603b      	str	r3, [r7, #0]
 800040a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800040c:	2201      	movs	r2, #1
 800040e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000412:	4815      	ldr	r0, [pc, #84]	@ (8000468 <MX_GPIO_Init+0xd0>)
 8000414:	f000 fe49 	bl	80010aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BluetoothReset_GPIO_Port, BluetoothReset_Pin, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800041e:	4812      	ldr	r0, [pc, #72]	@ (8000468 <MX_GPIO_Init+0xd0>)
 8000420:	f000 fe43 	bl	80010aa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin BluetoothReset_Pin */
  GPIO_InitStruct.Pin = LED_Pin|BluetoothReset_Pin;
 8000424:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000428:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042a:	2301      	movs	r3, #1
 800042c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042e:	2300      	movs	r3, #0
 8000430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000432:	2303      	movs	r3, #3
 8000434:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000436:	f107 0310 	add.w	r3, r7, #16
 800043a:	4619      	mov	r1, r3
 800043c:	480a      	ldr	r0, [pc, #40]	@ (8000468 <MX_GPIO_Init+0xd0>)
 800043e:	f000 fc99 	bl	8000d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000442:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000448:	2300      	movs	r3, #0
 800044a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044c:	2300      	movs	r3, #0
 800044e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000450:	f107 0310 	add.w	r3, r7, #16
 8000454:	4619      	mov	r1, r3
 8000456:	4805      	ldr	r0, [pc, #20]	@ (800046c <MX_GPIO_Init+0xd4>)
 8000458:	f000 fc8c 	bl	8000d74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800045c:	bf00      	nop
 800045e:	3720      	adds	r7, #32
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40021000 	.word	0x40021000
 8000468:	40011000 	.word	0x40011000
 800046c:	40010c00 	.word	0x40010c00

08000470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr

0800047c <string_compare>:

char buffer[50];
uint8_t timer_count = 0, buffer_index = 0;

uint8_t string_compare(char array1[], char array2[], uint16_t length)
{
 800047c:	b480      	push	{r7}
 800047e:	b087      	sub	sp, #28
 8000480:	af00      	add	r7, sp, #0
 8000482:	60f8      	str	r0, [r7, #12]
 8000484:	60b9      	str	r1, [r7, #8]
 8000486:	4613      	mov	r3, r2
 8000488:	80fb      	strh	r3, [r7, #6]
	 uint8_t comVAR=0, i;
 800048a:	2300      	movs	r3, #0
 800048c:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 800048e:	2300      	movs	r3, #0
 8000490:	75bb      	strb	r3, [r7, #22]
 8000492:	e012      	b.n	80004ba <string_compare+0x3e>
	   	{
	   		  if(array1[i]==array2[i])
 8000494:	7dbb      	ldrb	r3, [r7, #22]
 8000496:	68fa      	ldr	r2, [r7, #12]
 8000498:	4413      	add	r3, r2
 800049a:	781a      	ldrb	r2, [r3, #0]
 800049c:	7dbb      	ldrb	r3, [r7, #22]
 800049e:	68b9      	ldr	r1, [r7, #8]
 80004a0:	440b      	add	r3, r1
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d103      	bne.n	80004b0 <string_compare+0x34>
	   	  		  comVAR++;
 80004a8:	7dfb      	ldrb	r3, [r7, #23]
 80004aa:	3301      	adds	r3, #1
 80004ac:	75fb      	strb	r3, [r7, #23]
 80004ae:	e001      	b.n	80004b4 <string_compare+0x38>
	   	  	  else comVAR=0;
 80004b0:	2300      	movs	r3, #0
 80004b2:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 80004b4:	7dbb      	ldrb	r3, [r7, #22]
 80004b6:	3301      	adds	r3, #1
 80004b8:	75bb      	strb	r3, [r7, #22]
 80004ba:	7dbb      	ldrb	r3, [r7, #22]
 80004bc:	b29b      	uxth	r3, r3
 80004be:	88fa      	ldrh	r2, [r7, #6]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	d8e7      	bhi.n	8000494 <string_compare+0x18>
	   	}
	 if (comVAR==length)
 80004c4:	7dfb      	ldrb	r3, [r7, #23]
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	88fa      	ldrh	r2, [r7, #6]
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d101      	bne.n	80004d2 <string_compare+0x56>
		 	return 1;
 80004ce:	2301      	movs	r3, #1
 80004d0:	e000      	b.n	80004d4 <string_compare+0x58>
	 else 	return 0;
 80004d2:	2300      	movs	r3, #0
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	371c      	adds	r7, #28
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr
	...

080004e0 <Message_handler>:

void Message_handler()
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	if(string_compare(buffer, "LED ON", strlen("LED ON")))
 80004e4:	2206      	movs	r2, #6
 80004e6:	4927      	ldr	r1, [pc, #156]	@ (8000584 <Message_handler+0xa4>)
 80004e8:	4827      	ldr	r0, [pc, #156]	@ (8000588 <Message_handler+0xa8>)
 80004ea:	f7ff ffc7 	bl	800047c <string_compare>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d00d      	beq.n	8000510 <Message_handler+0x30>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004fa:	4824      	ldr	r0, [pc, #144]	@ (800058c <Message_handler+0xac>)
 80004fc:	f000 fdd5 	bl	80010aa <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t*)"LED is ON.\n", strlen("LED is ON.\n"), 500);
 8000500:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000504:	220b      	movs	r2, #11
 8000506:	4922      	ldr	r1, [pc, #136]	@ (8000590 <Message_handler+0xb0>)
 8000508:	4822      	ldr	r0, [pc, #136]	@ (8000594 <Message_handler+0xb4>)
 800050a:	f001 fe41 	bl	8002190 <HAL_UART_Transmit>
 800050e:	e02c      	b.n	800056a <Message_handler+0x8a>
	}else
	if(string_compare(buffer, "LED OFF", strlen("LED OFF")))
 8000510:	2207      	movs	r2, #7
 8000512:	4921      	ldr	r1, [pc, #132]	@ (8000598 <Message_handler+0xb8>)
 8000514:	481c      	ldr	r0, [pc, #112]	@ (8000588 <Message_handler+0xa8>)
 8000516:	f7ff ffb1 	bl	800047c <string_compare>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d00d      	beq.n	800053c <Message_handler+0x5c>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 8000520:	2201      	movs	r2, #1
 8000522:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000526:	4819      	ldr	r0, [pc, #100]	@ (800058c <Message_handler+0xac>)
 8000528:	f000 fdbf 	bl	80010aa <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t*)"LED is OFF.\n", strlen("LED is OFF.\n"), 500);
 800052c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000530:	220c      	movs	r2, #12
 8000532:	491a      	ldr	r1, [pc, #104]	@ (800059c <Message_handler+0xbc>)
 8000534:	4817      	ldr	r0, [pc, #92]	@ (8000594 <Message_handler+0xb4>)
 8000536:	f001 fe2b 	bl	8002190 <HAL_UART_Transmit>
 800053a:	e016      	b.n	800056a <Message_handler+0x8a>
	}else
	{
		strcat(buffer, "\n");
 800053c:	4812      	ldr	r0, [pc, #72]	@ (8000588 <Message_handler+0xa8>)
 800053e:	f7ff fe05 	bl	800014c <strlen>
 8000542:	4603      	mov	r3, r0
 8000544:	461a      	mov	r2, r3
 8000546:	4b10      	ldr	r3, [pc, #64]	@ (8000588 <Message_handler+0xa8>)
 8000548:	4413      	add	r3, r2
 800054a:	4915      	ldr	r1, [pc, #84]	@ (80005a0 <Message_handler+0xc0>)
 800054c:	461a      	mov	r2, r3
 800054e:	460b      	mov	r3, r1
 8000550:	881b      	ldrh	r3, [r3, #0]
 8000552:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 500);
 8000554:	480c      	ldr	r0, [pc, #48]	@ (8000588 <Message_handler+0xa8>)
 8000556:	f7ff fdf9 	bl	800014c <strlen>
 800055a:	4603      	mov	r3, r0
 800055c:	b29a      	uxth	r2, r3
 800055e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000562:	4909      	ldr	r1, [pc, #36]	@ (8000588 <Message_handler+0xa8>)
 8000564:	480b      	ldr	r0, [pc, #44]	@ (8000594 <Message_handler+0xb4>)
 8000566:	f001 fe13 	bl	8002190 <HAL_UART_Transmit>
	}

	memset(buffer, 0, sizeof(buffer));
 800056a:	2232      	movs	r2, #50	@ 0x32
 800056c:	2100      	movs	r1, #0
 800056e:	4806      	ldr	r0, [pc, #24]	@ (8000588 <Message_handler+0xa8>)
 8000570:	f002 fc9e 	bl	8002eb0 <memset>
	buffer_index = 0;
 8000574:	4b0b      	ldr	r3, [pc, #44]	@ (80005a4 <Message_handler+0xc4>)
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
	timer_count = 0;
 800057a:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <Message_handler+0xc8>)
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]
}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}
 8000584:	080037f8 	.word	0x080037f8
 8000588:	20000108 	.word	0x20000108
 800058c:	40011000 	.word	0x40011000
 8000590:	08003800 	.word	0x08003800
 8000594:	200000c0 	.word	0x200000c0
 8000598:	0800380c 	.word	0x0800380c
 800059c:	08003814 	.word	0x08003814
 80005a0:	08003824 	.word	0x08003824
 80005a4:	2000013b 	.word	0x2000013b
 80005a8:	2000013a 	.word	0x2000013a

080005ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005b2:	4b15      	ldr	r3, [pc, #84]	@ (8000608 <HAL_MspInit+0x5c>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	4a14      	ldr	r2, [pc, #80]	@ (8000608 <HAL_MspInit+0x5c>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6193      	str	r3, [r2, #24]
 80005be:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <HAL_MspInit+0x5c>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <HAL_MspInit+0x5c>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000608 <HAL_MspInit+0x5c>)
 80005d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d4:	61d3      	str	r3, [r2, #28]
 80005d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <HAL_MspInit+0x5c>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005e2:	4b0a      	ldr	r3, [pc, #40]	@ (800060c <HAL_MspInit+0x60>)
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	4a04      	ldr	r2, [pc, #16]	@ (800060c <HAL_MspInit+0x60>)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr
 8000608:	40021000 	.word	0x40021000
 800060c:	40010000 	.word	0x40010000

08000610 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000620:	d113      	bne.n	800064a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000622:	4b0c      	ldr	r3, [pc, #48]	@ (8000654 <HAL_TIM_Base_MspInit+0x44>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	4a0b      	ldr	r2, [pc, #44]	@ (8000654 <HAL_TIM_Base_MspInit+0x44>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	61d3      	str	r3, [r2, #28]
 800062e:	4b09      	ldr	r3, [pc, #36]	@ (8000654 <HAL_TIM_Base_MspInit+0x44>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2100      	movs	r1, #0
 800063e:	201c      	movs	r0, #28
 8000640:	f000 faaf 	bl	8000ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000644:	201c      	movs	r0, #28
 8000646:	f000 fac8 	bl	8000bda <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800064a:	bf00      	nop
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40021000 	.word	0x40021000

08000658 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a1f      	ldr	r2, [pc, #124]	@ (80006f0 <HAL_UART_MspInit+0x98>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d137      	bne.n	80006e8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000678:	4b1e      	ldr	r3, [pc, #120]	@ (80006f4 <HAL_UART_MspInit+0x9c>)
 800067a:	69db      	ldr	r3, [r3, #28]
 800067c:	4a1d      	ldr	r2, [pc, #116]	@ (80006f4 <HAL_UART_MspInit+0x9c>)
 800067e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000682:	61d3      	str	r3, [r2, #28]
 8000684:	4b1b      	ldr	r3, [pc, #108]	@ (80006f4 <HAL_UART_MspInit+0x9c>)
 8000686:	69db      	ldr	r3, [r3, #28]
 8000688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000690:	4b18      	ldr	r3, [pc, #96]	@ (80006f4 <HAL_UART_MspInit+0x9c>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a17      	ldr	r2, [pc, #92]	@ (80006f4 <HAL_UART_MspInit+0x9c>)
 8000696:	f043 0304 	orr.w	r3, r3, #4
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b15      	ldr	r3, [pc, #84]	@ (80006f4 <HAL_UART_MspInit+0x9c>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f003 0304 	and.w	r3, r3, #4
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006a8:	2304      	movs	r3, #4
 80006aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ac:	2302      	movs	r3, #2
 80006ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b0:	2303      	movs	r3, #3
 80006b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b4:	f107 0310 	add.w	r3, r7, #16
 80006b8:	4619      	mov	r1, r3
 80006ba:	480f      	ldr	r0, [pc, #60]	@ (80006f8 <HAL_UART_MspInit+0xa0>)
 80006bc:	f000 fb5a 	bl	8000d74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006c0:	2308      	movs	r3, #8
 80006c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	4619      	mov	r1, r3
 80006d2:	4809      	ldr	r0, [pc, #36]	@ (80006f8 <HAL_UART_MspInit+0xa0>)
 80006d4:	f000 fb4e 	bl	8000d74 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80006d8:	2200      	movs	r2, #0
 80006da:	2100      	movs	r1, #0
 80006dc:	2026      	movs	r0, #38	@ 0x26
 80006de:	f000 fa60 	bl	8000ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006e2:	2026      	movs	r0, #38	@ 0x26
 80006e4:	f000 fa79 	bl	8000bda <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80006e8:	bf00      	nop
 80006ea:	3720      	adds	r7, #32
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40004400 	.word	0x40004400
 80006f4:	40021000 	.word	0x40021000
 80006f8:	40010800 	.word	0x40010800

080006fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr

08000708 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <HardFault_Handler+0x4>

08000710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000714:	bf00      	nop
 8000716:	e7fd      	b.n	8000714 <MemManage_Handler+0x4>

08000718 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <BusFault_Handler+0x4>

08000720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <UsageFault_Handler+0x4>

08000728 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr

08000740 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000750:	f000 f910 	bl	8000974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(strlen(buffer)>0)
 800075c:	4b0a      	ldr	r3, [pc, #40]	@ (8000788 <TIM2_IRQHandler+0x30>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d005      	beq.n	8000770 <TIM2_IRQHandler+0x18>
		timer_count++;
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <TIM2_IRQHandler+0x34>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	3301      	adds	r3, #1
 800076a:	b2da      	uxtb	r2, r3
 800076c:	4b07      	ldr	r3, [pc, #28]	@ (800078c <TIM2_IRQHandler+0x34>)
 800076e:	701a      	strb	r2, [r3, #0]

	if(timer_count>5)
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <TIM2_IRQHandler+0x34>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b05      	cmp	r3, #5
 8000776:	d901      	bls.n	800077c <TIM2_IRQHandler+0x24>
		Message_handler();
 8000778:	f7ff feb2 	bl	80004e0 <Message_handler>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800077c:	4804      	ldr	r0, [pc, #16]	@ (8000790 <TIM2_IRQHandler+0x38>)
 800077e:	f001 f95f 	bl	8001a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000108 	.word	0x20000108
 800078c:	2000013a 	.word	0x2000013a
 8000790:	20000078 	.word	0x20000078

08000794 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_Receive(&huart2, (uint8_t*)&buffer[buffer_index++], 1, 10);
 8000798:	4b0d      	ldr	r3, [pc, #52]	@ (80007d0 <USART2_IRQHandler+0x3c>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	1c5a      	adds	r2, r3, #1
 800079e:	b2d1      	uxtb	r1, r2
 80007a0:	4a0b      	ldr	r2, [pc, #44]	@ (80007d0 <USART2_IRQHandler+0x3c>)
 80007a2:	7011      	strb	r1, [r2, #0]
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <USART2_IRQHandler+0x40>)
 80007a8:	18d1      	adds	r1, r2, r3
 80007aa:	230a      	movs	r3, #10
 80007ac:	2201      	movs	r2, #1
 80007ae:	480a      	ldr	r0, [pc, #40]	@ (80007d8 <USART2_IRQHandler+0x44>)
 80007b0:	f001 fd79 	bl	80022a6 <HAL_UART_Receive>

	if(buffer[buffer_index-1] == '\n')
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <USART2_IRQHandler+0x3c>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	3b01      	subs	r3, #1
 80007ba:	4a06      	ldr	r2, [pc, #24]	@ (80007d4 <USART2_IRQHandler+0x40>)
 80007bc:	5cd3      	ldrb	r3, [r2, r3]
 80007be:	2b0a      	cmp	r3, #10
 80007c0:	d101      	bne.n	80007c6 <USART2_IRQHandler+0x32>
		Message_handler();
 80007c2:	f7ff fe8d 	bl	80004e0 <Message_handler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007c6:	4804      	ldr	r0, [pc, #16]	@ (80007d8 <USART2_IRQHandler+0x44>)
 80007c8:	f001 fe04 	bl	80023d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2000013b 	.word	0x2000013b
 80007d4:	20000108 	.word	0x20000108
 80007d8:	200000c0 	.word	0x200000c0

080007dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80007e4:	4b11      	ldr	r3, [pc, #68]	@ (800082c <_sbrk+0x50>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d102      	bne.n	80007f2 <_sbrk+0x16>
		heap_end = &end;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <_sbrk+0x50>)
 80007ee:	4a10      	ldr	r2, [pc, #64]	@ (8000830 <_sbrk+0x54>)
 80007f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <_sbrk+0x50>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80007f8:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <_sbrk+0x50>)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4413      	add	r3, r2
 8000800:	466a      	mov	r2, sp
 8000802:	4293      	cmp	r3, r2
 8000804:	d907      	bls.n	8000816 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000806:	f002 fb5b 	bl	8002ec0 <__errno>
 800080a:	4603      	mov	r3, r0
 800080c:	220c      	movs	r2, #12
 800080e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000810:	f04f 33ff 	mov.w	r3, #4294967295
 8000814:	e006      	b.n	8000824 <_sbrk+0x48>
	}

	heap_end += incr;
 8000816:	4b05      	ldr	r3, [pc, #20]	@ (800082c <_sbrk+0x50>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	4a03      	ldr	r2, [pc, #12]	@ (800082c <_sbrk+0x50>)
 8000820:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000822:	68fb      	ldr	r3, [r7, #12]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	2000013c 	.word	0x2000013c
 8000830:	20000290 	.word	0x20000290

08000834 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000838:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <SystemInit+0x5c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a14      	ldr	r2, [pc, #80]	@ (8000890 <SystemInit+0x5c>)
 800083e:	f043 0301 	orr.w	r3, r3, #1
 8000842:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000844:	4b12      	ldr	r3, [pc, #72]	@ (8000890 <SystemInit+0x5c>)
 8000846:	685a      	ldr	r2, [r3, #4]
 8000848:	4911      	ldr	r1, [pc, #68]	@ (8000890 <SystemInit+0x5c>)
 800084a:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <SystemInit+0x60>)
 800084c:	4013      	ands	r3, r2
 800084e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000850:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <SystemInit+0x5c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a0e      	ldr	r2, [pc, #56]	@ (8000890 <SystemInit+0x5c>)
 8000856:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 800085a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800085e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000860:	4b0b      	ldr	r3, [pc, #44]	@ (8000890 <SystemInit+0x5c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a0a      	ldr	r2, [pc, #40]	@ (8000890 <SystemInit+0x5c>)
 8000866:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800086a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800086c:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <SystemInit+0x5c>)
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	4a07      	ldr	r2, [pc, #28]	@ (8000890 <SystemInit+0x5c>)
 8000872:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
 8000876:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000878:	4b05      	ldr	r3, [pc, #20]	@ (8000890 <SystemInit+0x5c>)
 800087a:	f44f 021f 	mov.w	r2, #10420224	@ 0x9f0000
 800087e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000880:	4b05      	ldr	r3, [pc, #20]	@ (8000898 <SystemInit+0x64>)
 8000882:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000886:	609a      	str	r2, [r3, #8]
#endif 
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	40021000 	.word	0x40021000
 8000894:	f8ff0000 	.word	0xf8ff0000
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800089c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800089e:	e003      	b.n	80008a8 <LoopCopyDataInit>

080008a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008a0:	4b0b      	ldr	r3, [pc, #44]	@ (80008d0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80008a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008a6:	3104      	adds	r1, #4

080008a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008a8:	480a      	ldr	r0, [pc, #40]	@ (80008d4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80008aa:	4b0b      	ldr	r3, [pc, #44]	@ (80008d8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80008ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008b0:	d3f6      	bcc.n	80008a0 <CopyDataInit>
  ldr r2, =_sbss
 80008b2:	4a0a      	ldr	r2, [pc, #40]	@ (80008dc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80008b4:	e002      	b.n	80008bc <LoopFillZerobss>

080008b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80008b8:	f842 3b04 	str.w	r3, [r2], #4

080008bc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008bc:	4b08      	ldr	r3, [pc, #32]	@ (80008e0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008c0:	d3f9      	bcc.n	80008b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008c2:	f7ff ffb7 	bl	8000834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008c6:	f002 fb01 	bl	8002ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ca:	f7ff fc6d 	bl	80001a8 <main>
  bx lr
 80008ce:	4770      	bx	lr
  ldr r3, =_sidata
 80008d0:	08003898 	.word	0x08003898
  ldr r0, =_sdata
 80008d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008d8:	2000005c 	.word	0x2000005c
  ldr r2, =_sbss
 80008dc:	2000005c 	.word	0x2000005c
  ldr r3, = _ebss
 80008e0:	2000028c 	.word	0x2000028c

080008e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008e4:	e7fe      	b.n	80008e4 <ADC1_2_IRQHandler>
	...

080008e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ec:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <HAL_Init+0x28>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a07      	ldr	r2, [pc, #28]	@ (8000910 <HAL_Init+0x28>)
 80008f2:	f043 0310 	orr.w	r3, r3, #16
 80008f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f8:	2003      	movs	r0, #3
 80008fa:	f000 f947 	bl	8000b8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008fe:	2000      	movs	r0, #0
 8000900:	f000 f808 	bl	8000914 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000904:	f7ff fe52 	bl	80005ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40022000 	.word	0x40022000

08000914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800091c:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <HAL_InitTick+0x54>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4b12      	ldr	r3, [pc, #72]	@ (800096c <HAL_InitTick+0x58>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	4619      	mov	r1, r3
 8000926:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800092a:	fbb3 f3f1 	udiv	r3, r3, r1
 800092e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000932:	4618      	mov	r0, r3
 8000934:	f000 f95f 	bl	8000bf6 <HAL_SYSTICK_Config>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800093e:	2301      	movs	r3, #1
 8000940:	e00e      	b.n	8000960 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2b0f      	cmp	r3, #15
 8000946:	d80a      	bhi.n	800095e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000948:	2200      	movs	r2, #0
 800094a:	6879      	ldr	r1, [r7, #4]
 800094c:	f04f 30ff 	mov.w	r0, #4294967295
 8000950:	f000 f927 	bl	8000ba2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000954:	4a06      	ldr	r2, [pc, #24]	@ (8000970 <HAL_InitTick+0x5c>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800095a:	2300      	movs	r3, #0
 800095c:	e000      	b.n	8000960 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
}
 8000960:	4618      	mov	r0, r3
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000000 	.word	0x20000000
 800096c:	20000008 	.word	0x20000008
 8000970:	20000004 	.word	0x20000004

08000974 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000978:	4b05      	ldr	r3, [pc, #20]	@ (8000990 <HAL_IncTick+0x1c>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	4b05      	ldr	r3, [pc, #20]	@ (8000994 <HAL_IncTick+0x20>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4413      	add	r3, r2
 8000984:	4a03      	ldr	r2, [pc, #12]	@ (8000994 <HAL_IncTick+0x20>)
 8000986:	6013      	str	r3, [r2, #0]
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	20000008 	.word	0x20000008
 8000994:	20000140 	.word	0x20000140

08000998 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return uwTick;
 800099c:	4b02      	ldr	r3, [pc, #8]	@ (80009a8 <HAL_GetTick+0x10>)
 800099e:	681b      	ldr	r3, [r3, #0]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	20000140 	.word	0x20000140

080009ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009b4:	f7ff fff0 	bl	8000998 <HAL_GetTick>
 80009b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009c4:	d005      	beq.n	80009d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009c6:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <HAL_Delay+0x44>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	461a      	mov	r2, r3
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	4413      	add	r3, r2
 80009d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009d2:	bf00      	nop
 80009d4:	f7ff ffe0 	bl	8000998 <HAL_GetTick>
 80009d8:	4602      	mov	r2, r0
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d8f7      	bhi.n	80009d4 <HAL_Delay+0x28>
  {
  }
}
 80009e4:	bf00      	nop
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000008 	.word	0x20000008

080009f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a04:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a10:	4013      	ands	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a26:	4a04      	ldr	r2, [pc, #16]	@ (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	60d3      	str	r3, [r2, #12]
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a40:	4b04      	ldr	r3, [pc, #16]	@ (8000a54 <__NVIC_GetPriorityGrouping+0x18>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	0a1b      	lsrs	r3, r3, #8
 8000a46:	f003 0307 	and.w	r3, r3, #7
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	db0b      	blt.n	8000a82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	f003 021f 	and.w	r2, r3, #31
 8000a70:	4906      	ldr	r1, [pc, #24]	@ (8000a8c <__NVIC_EnableIRQ+0x34>)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	095b      	lsrs	r3, r3, #5
 8000a78:	2001      	movs	r0, #1
 8000a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr
 8000a8c:	e000e100 	.word	0xe000e100

08000a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	6039      	str	r1, [r7, #0]
 8000a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	db0a      	blt.n	8000aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	490c      	ldr	r1, [pc, #48]	@ (8000adc <__NVIC_SetPriority+0x4c>)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	0112      	lsls	r2, r2, #4
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	440b      	add	r3, r1
 8000ab4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab8:	e00a      	b.n	8000ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4908      	ldr	r1, [pc, #32]	@ (8000ae0 <__NVIC_SetPriority+0x50>)
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	f003 030f 	and.w	r3, r3, #15
 8000ac6:	3b04      	subs	r3, #4
 8000ac8:	0112      	lsls	r2, r2, #4
 8000aca:	b2d2      	uxtb	r2, r2
 8000acc:	440b      	add	r3, r1
 8000ace:	761a      	strb	r2, [r3, #24]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000e100 	.word	0xe000e100
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	@ 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	f1c3 0307 	rsb	r3, r3, #7
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	bf28      	it	cs
 8000b02:	2304      	movcs	r3, #4
 8000b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	2b06      	cmp	r3, #6
 8000b0c:	d902      	bls.n	8000b14 <NVIC_EncodePriority+0x30>
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3b03      	subs	r3, #3
 8000b12:	e000      	b.n	8000b16 <NVIC_EncodePriority+0x32>
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b18:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43da      	mvns	r2, r3
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	401a      	ands	r2, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	43d9      	mvns	r1, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	4313      	orrs	r3, r2
         );
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3724      	adds	r7, #36	@ 0x24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr

08000b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b58:	d301      	bcc.n	8000b5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e00f      	b.n	8000b7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b88 <SysTick_Config+0x40>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b66:	210f      	movs	r1, #15
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	f7ff ff90 	bl	8000a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b70:	4b05      	ldr	r3, [pc, #20]	@ (8000b88 <SysTick_Config+0x40>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b76:	4b04      	ldr	r3, [pc, #16]	@ (8000b88 <SysTick_Config+0x40>)
 8000b78:	2207      	movs	r2, #7
 8000b7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	e000e010 	.word	0xe000e010

08000b8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff ff2d 	bl	80009f4 <__NVIC_SetPriorityGrouping>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b086      	sub	sp, #24
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	4603      	mov	r3, r0
 8000baa:	60b9      	str	r1, [r7, #8]
 8000bac:	607a      	str	r2, [r7, #4]
 8000bae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb4:	f7ff ff42 	bl	8000a3c <__NVIC_GetPriorityGrouping>
 8000bb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	68b9      	ldr	r1, [r7, #8]
 8000bbe:	6978      	ldr	r0, [r7, #20]
 8000bc0:	f7ff ff90 	bl	8000ae4 <NVIC_EncodePriority>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff5f 	bl	8000a90 <__NVIC_SetPriority>
}
 8000bd2:	bf00      	nop
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	4603      	mov	r3, r0
 8000be2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ff35 	bl	8000a58 <__NVIC_EnableIRQ>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff ffa2 	bl	8000b48 <SysTick_Config>
 8000c04:	4603      	mov	r3, r0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b085      	sub	sp, #20
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c16:	2300      	movs	r3, #0
 8000c18:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d008      	beq.n	8000c38 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2204      	movs	r2, #4
 8000c2a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	e020      	b.n	8000c7a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f022 020e 	bic.w	r2, r2, #14
 8000c46:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f022 0201 	bic.w	r2, r2, #1
 8000c56:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c60:	2101      	movs	r1, #1
 8000c62:	fa01 f202 	lsl.w	r2, r1, r2
 8000c66:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr

08000c84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d005      	beq.n	8000ca8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2204      	movs	r2, #4
 8000ca0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	73fb      	strb	r3, [r7, #15]
 8000ca6:	e051      	b.n	8000d4c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f022 020e 	bic.w	r2, r2, #14
 8000cb6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f022 0201 	bic.w	r2, r2, #1
 8000cc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a22      	ldr	r2, [pc, #136]	@ (8000d58 <HAL_DMA_Abort_IT+0xd4>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d029      	beq.n	8000d26 <HAL_DMA_Abort_IT+0xa2>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a21      	ldr	r2, [pc, #132]	@ (8000d5c <HAL_DMA_Abort_IT+0xd8>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d022      	beq.n	8000d22 <HAL_DMA_Abort_IT+0x9e>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a1f      	ldr	r2, [pc, #124]	@ (8000d60 <HAL_DMA_Abort_IT+0xdc>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d01a      	beq.n	8000d1c <HAL_DMA_Abort_IT+0x98>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a1e      	ldr	r2, [pc, #120]	@ (8000d64 <HAL_DMA_Abort_IT+0xe0>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d012      	beq.n	8000d16 <HAL_DMA_Abort_IT+0x92>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8000d68 <HAL_DMA_Abort_IT+0xe4>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d00a      	beq.n	8000d10 <HAL_DMA_Abort_IT+0x8c>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8000d6c <HAL_DMA_Abort_IT+0xe8>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d102      	bne.n	8000d0a <HAL_DMA_Abort_IT+0x86>
 8000d04:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000d08:	e00e      	b.n	8000d28 <HAL_DMA_Abort_IT+0xa4>
 8000d0a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d0e:	e00b      	b.n	8000d28 <HAL_DMA_Abort_IT+0xa4>
 8000d10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d14:	e008      	b.n	8000d28 <HAL_DMA_Abort_IT+0xa4>
 8000d16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d1a:	e005      	b.n	8000d28 <HAL_DMA_Abort_IT+0xa4>
 8000d1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d20:	e002      	b.n	8000d28 <HAL_DMA_Abort_IT+0xa4>
 8000d22:	2310      	movs	r3, #16
 8000d24:	e000      	b.n	8000d28 <HAL_DMA_Abort_IT+0xa4>
 8000d26:	2301      	movs	r3, #1
 8000d28:	4a11      	ldr	r2, [pc, #68]	@ (8000d70 <HAL_DMA_Abort_IT+0xec>)
 8000d2a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d003      	beq.n	8000d4c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	4798      	blx	r3
    } 
  }
  return status;
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40020008 	.word	0x40020008
 8000d5c:	4002001c 	.word	0x4002001c
 8000d60:	40020030 	.word	0x40020030
 8000d64:	40020044 	.word	0x40020044
 8000d68:	40020058 	.word	0x40020058
 8000d6c:	4002006c 	.word	0x4002006c
 8000d70:	40020000 	.word	0x40020000

08000d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b08b      	sub	sp, #44	@ 0x2c
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d82:	2300      	movs	r3, #0
 8000d84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d86:	e169      	b.n	800105c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	69fa      	ldr	r2, [r7, #28]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	f040 8158 	bne.w	8001056 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	4a9a      	ldr	r2, [pc, #616]	@ (8001014 <HAL_GPIO_Init+0x2a0>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d05e      	beq.n	8000e6e <HAL_GPIO_Init+0xfa>
 8000db0:	4a98      	ldr	r2, [pc, #608]	@ (8001014 <HAL_GPIO_Init+0x2a0>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d875      	bhi.n	8000ea2 <HAL_GPIO_Init+0x12e>
 8000db6:	4a98      	ldr	r2, [pc, #608]	@ (8001018 <HAL_GPIO_Init+0x2a4>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d058      	beq.n	8000e6e <HAL_GPIO_Init+0xfa>
 8000dbc:	4a96      	ldr	r2, [pc, #600]	@ (8001018 <HAL_GPIO_Init+0x2a4>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d86f      	bhi.n	8000ea2 <HAL_GPIO_Init+0x12e>
 8000dc2:	4a96      	ldr	r2, [pc, #600]	@ (800101c <HAL_GPIO_Init+0x2a8>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d052      	beq.n	8000e6e <HAL_GPIO_Init+0xfa>
 8000dc8:	4a94      	ldr	r2, [pc, #592]	@ (800101c <HAL_GPIO_Init+0x2a8>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d869      	bhi.n	8000ea2 <HAL_GPIO_Init+0x12e>
 8000dce:	4a94      	ldr	r2, [pc, #592]	@ (8001020 <HAL_GPIO_Init+0x2ac>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d04c      	beq.n	8000e6e <HAL_GPIO_Init+0xfa>
 8000dd4:	4a92      	ldr	r2, [pc, #584]	@ (8001020 <HAL_GPIO_Init+0x2ac>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d863      	bhi.n	8000ea2 <HAL_GPIO_Init+0x12e>
 8000dda:	4a92      	ldr	r2, [pc, #584]	@ (8001024 <HAL_GPIO_Init+0x2b0>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d046      	beq.n	8000e6e <HAL_GPIO_Init+0xfa>
 8000de0:	4a90      	ldr	r2, [pc, #576]	@ (8001024 <HAL_GPIO_Init+0x2b0>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d85d      	bhi.n	8000ea2 <HAL_GPIO_Init+0x12e>
 8000de6:	2b12      	cmp	r3, #18
 8000de8:	d82a      	bhi.n	8000e40 <HAL_GPIO_Init+0xcc>
 8000dea:	2b12      	cmp	r3, #18
 8000dec:	d859      	bhi.n	8000ea2 <HAL_GPIO_Init+0x12e>
 8000dee:	a201      	add	r2, pc, #4	@ (adr r2, 8000df4 <HAL_GPIO_Init+0x80>)
 8000df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df4:	08000e6f 	.word	0x08000e6f
 8000df8:	08000e49 	.word	0x08000e49
 8000dfc:	08000e5b 	.word	0x08000e5b
 8000e00:	08000e9d 	.word	0x08000e9d
 8000e04:	08000ea3 	.word	0x08000ea3
 8000e08:	08000ea3 	.word	0x08000ea3
 8000e0c:	08000ea3 	.word	0x08000ea3
 8000e10:	08000ea3 	.word	0x08000ea3
 8000e14:	08000ea3 	.word	0x08000ea3
 8000e18:	08000ea3 	.word	0x08000ea3
 8000e1c:	08000ea3 	.word	0x08000ea3
 8000e20:	08000ea3 	.word	0x08000ea3
 8000e24:	08000ea3 	.word	0x08000ea3
 8000e28:	08000ea3 	.word	0x08000ea3
 8000e2c:	08000ea3 	.word	0x08000ea3
 8000e30:	08000ea3 	.word	0x08000ea3
 8000e34:	08000ea3 	.word	0x08000ea3
 8000e38:	08000e51 	.word	0x08000e51
 8000e3c:	08000e65 	.word	0x08000e65
 8000e40:	4a79      	ldr	r2, [pc, #484]	@ (8001028 <HAL_GPIO_Init+0x2b4>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d013      	beq.n	8000e6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e46:	e02c      	b.n	8000ea2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	623b      	str	r3, [r7, #32]
          break;
 8000e4e:	e029      	b.n	8000ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	3304      	adds	r3, #4
 8000e56:	623b      	str	r3, [r7, #32]
          break;
 8000e58:	e024      	b.n	8000ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	3308      	adds	r3, #8
 8000e60:	623b      	str	r3, [r7, #32]
          break;
 8000e62:	e01f      	b.n	8000ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	330c      	adds	r3, #12
 8000e6a:	623b      	str	r3, [r7, #32]
          break;
 8000e6c:	e01a      	b.n	8000ea4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d102      	bne.n	8000e7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e76:	2304      	movs	r3, #4
 8000e78:	623b      	str	r3, [r7, #32]
          break;
 8000e7a:	e013      	b.n	8000ea4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d105      	bne.n	8000e90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e84:	2308      	movs	r3, #8
 8000e86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	69fa      	ldr	r2, [r7, #28]
 8000e8c:	611a      	str	r2, [r3, #16]
          break;
 8000e8e:	e009      	b.n	8000ea4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e90:	2308      	movs	r3, #8
 8000e92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	69fa      	ldr	r2, [r7, #28]
 8000e98:	615a      	str	r2, [r3, #20]
          break;
 8000e9a:	e003      	b.n	8000ea4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	623b      	str	r3, [r7, #32]
          break;
 8000ea0:	e000      	b.n	8000ea4 <HAL_GPIO_Init+0x130>
          break;
 8000ea2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	2bff      	cmp	r3, #255	@ 0xff
 8000ea8:	d801      	bhi.n	8000eae <HAL_GPIO_Init+0x13a>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	e001      	b.n	8000eb2 <HAL_GPIO_Init+0x13e>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	2bff      	cmp	r3, #255	@ 0xff
 8000eb8:	d802      	bhi.n	8000ec0 <HAL_GPIO_Init+0x14c>
 8000eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	e002      	b.n	8000ec6 <HAL_GPIO_Init+0x152>
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec2:	3b08      	subs	r3, #8
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	210f      	movs	r1, #15
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	6a39      	ldr	r1, [r7, #32]
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee0:	431a      	orrs	r2, r3
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f000 80b1 	beq.w	8001056 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ef4:	4b4d      	ldr	r3, [pc, #308]	@ (800102c <HAL_GPIO_Init+0x2b8>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a4c      	ldr	r2, [pc, #304]	@ (800102c <HAL_GPIO_Init+0x2b8>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	6193      	str	r3, [r2, #24]
 8000f00:	4b4a      	ldr	r3, [pc, #296]	@ (800102c <HAL_GPIO_Init+0x2b8>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f0c:	4a48      	ldr	r2, [pc, #288]	@ (8001030 <HAL_GPIO_Init+0x2bc>)
 8000f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f10:	089b      	lsrs	r3, r3, #2
 8000f12:	3302      	adds	r3, #2
 8000f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	220f      	movs	r2, #15
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a40      	ldr	r2, [pc, #256]	@ (8001034 <HAL_GPIO_Init+0x2c0>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d013      	beq.n	8000f60 <HAL_GPIO_Init+0x1ec>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a3f      	ldr	r2, [pc, #252]	@ (8001038 <HAL_GPIO_Init+0x2c4>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d00d      	beq.n	8000f5c <HAL_GPIO_Init+0x1e8>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a3e      	ldr	r2, [pc, #248]	@ (800103c <HAL_GPIO_Init+0x2c8>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d007      	beq.n	8000f58 <HAL_GPIO_Init+0x1e4>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a3d      	ldr	r2, [pc, #244]	@ (8001040 <HAL_GPIO_Init+0x2cc>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d101      	bne.n	8000f54 <HAL_GPIO_Init+0x1e0>
 8000f50:	2303      	movs	r3, #3
 8000f52:	e006      	b.n	8000f62 <HAL_GPIO_Init+0x1ee>
 8000f54:	2304      	movs	r3, #4
 8000f56:	e004      	b.n	8000f62 <HAL_GPIO_Init+0x1ee>
 8000f58:	2302      	movs	r3, #2
 8000f5a:	e002      	b.n	8000f62 <HAL_GPIO_Init+0x1ee>
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e000      	b.n	8000f62 <HAL_GPIO_Init+0x1ee>
 8000f60:	2300      	movs	r3, #0
 8000f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f64:	f002 0203 	and.w	r2, r2, #3
 8000f68:	0092      	lsls	r2, r2, #2
 8000f6a:	4093      	lsls	r3, r2
 8000f6c:	68fa      	ldr	r2, [r7, #12]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f72:	492f      	ldr	r1, [pc, #188]	@ (8001030 <HAL_GPIO_Init+0x2bc>)
 8000f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f76:	089b      	lsrs	r3, r3, #2
 8000f78:	3302      	adds	r3, #2
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d006      	beq.n	8000f9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001044 <HAL_GPIO_Init+0x2d0>)
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	492c      	ldr	r1, [pc, #176]	@ (8001044 <HAL_GPIO_Init+0x2d0>)
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	608b      	str	r3, [r1, #8]
 8000f98:	e006      	b.n	8000fa8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001044 <HAL_GPIO_Init+0x2d0>)
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	4928      	ldr	r1, [pc, #160]	@ (8001044 <HAL_GPIO_Init+0x2d0>)
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d006      	beq.n	8000fc2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fb4:	4b23      	ldr	r3, [pc, #140]	@ (8001044 <HAL_GPIO_Init+0x2d0>)
 8000fb6:	68da      	ldr	r2, [r3, #12]
 8000fb8:	4922      	ldr	r1, [pc, #136]	@ (8001044 <HAL_GPIO_Init+0x2d0>)
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	60cb      	str	r3, [r1, #12]
 8000fc0:	e006      	b.n	8000fd0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fc2:	4b20      	ldr	r3, [pc, #128]	@ (8001044 <HAL_GPIO_Init+0x2d0>)
 8000fc4:	68da      	ldr	r2, [r3, #12]
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	491e      	ldr	r1, [pc, #120]	@ (8001044 <HAL_GPIO_Init+0x2d0>)
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d006      	beq.n	8000fea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fdc:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <HAL_GPIO_Init+0x2d0>)
 8000fde:	685a      	ldr	r2, [r3, #4]
 8000fe0:	4918      	ldr	r1, [pc, #96]	@ (8001044 <HAL_GPIO_Init+0x2d0>)
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	604b      	str	r3, [r1, #4]
 8000fe8:	e006      	b.n	8000ff8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fea:	4b16      	ldr	r3, [pc, #88]	@ (8001044 <HAL_GPIO_Init+0x2d0>)
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	4914      	ldr	r1, [pc, #80]	@ (8001044 <HAL_GPIO_Init+0x2d0>)
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d021      	beq.n	8001048 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001004:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <HAL_GPIO_Init+0x2d0>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	490e      	ldr	r1, [pc, #56]	@ (8001044 <HAL_GPIO_Init+0x2d0>)
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	4313      	orrs	r3, r2
 800100e:	600b      	str	r3, [r1, #0]
 8001010:	e021      	b.n	8001056 <HAL_GPIO_Init+0x2e2>
 8001012:	bf00      	nop
 8001014:	10320000 	.word	0x10320000
 8001018:	10310000 	.word	0x10310000
 800101c:	10220000 	.word	0x10220000
 8001020:	10210000 	.word	0x10210000
 8001024:	10120000 	.word	0x10120000
 8001028:	10110000 	.word	0x10110000
 800102c:	40021000 	.word	0x40021000
 8001030:	40010000 	.word	0x40010000
 8001034:	40010800 	.word	0x40010800
 8001038:	40010c00 	.word	0x40010c00
 800103c:	40011000 	.word	0x40011000
 8001040:	40011400 	.word	0x40011400
 8001044:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001048:	4b0b      	ldr	r3, [pc, #44]	@ (8001078 <HAL_GPIO_Init+0x304>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	43db      	mvns	r3, r3
 8001050:	4909      	ldr	r1, [pc, #36]	@ (8001078 <HAL_GPIO_Init+0x304>)
 8001052:	4013      	ands	r3, r2
 8001054:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001058:	3301      	adds	r3, #1
 800105a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001062:	fa22 f303 	lsr.w	r3, r2, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	f47f ae8e 	bne.w	8000d88 <HAL_GPIO_Init+0x14>
  }
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	372c      	adds	r7, #44	@ 0x2c
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr
 8001078:	40010400 	.word	0x40010400

0800107c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	460b      	mov	r3, r1
 8001086:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	887b      	ldrh	r3, [r7, #2]
 800108e:	4013      	ands	r3, r2
 8001090:	2b00      	cmp	r3, #0
 8001092:	d002      	beq.n	800109a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001094:	2301      	movs	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
 8001098:	e001      	b.n	800109e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800109a:	2300      	movs	r3, #0
 800109c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800109e:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr

080010aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	460b      	mov	r3, r1
 80010b4:	807b      	strh	r3, [r7, #2]
 80010b6:	4613      	mov	r3, r2
 80010b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010ba:	787b      	ldrb	r3, [r7, #1]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d003      	beq.n	80010c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010c0:	887a      	ldrh	r2, [r7, #2]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010c6:	e003      	b.n	80010d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010c8:	887b      	ldrh	r3, [r7, #2]
 80010ca:	041a      	lsls	r2, r3, #16
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	611a      	str	r2, [r3, #16]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr
	...

080010dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e272      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f000 8087 	beq.w	800120a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010fc:	4b92      	ldr	r3, [pc, #584]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 030c 	and.w	r3, r3, #12
 8001104:	2b04      	cmp	r3, #4
 8001106:	d00c      	beq.n	8001122 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001108:	4b8f      	ldr	r3, [pc, #572]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 030c 	and.w	r3, r3, #12
 8001110:	2b08      	cmp	r3, #8
 8001112:	d112      	bne.n	800113a <HAL_RCC_OscConfig+0x5e>
 8001114:	4b8c      	ldr	r3, [pc, #560]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800111c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001120:	d10b      	bne.n	800113a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001122:	4b89      	ldr	r3, [pc, #548]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d06c      	beq.n	8001208 <HAL_RCC_OscConfig+0x12c>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d168      	bne.n	8001208 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e24c      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001142:	d106      	bne.n	8001152 <HAL_RCC_OscConfig+0x76>
 8001144:	4b80      	ldr	r3, [pc, #512]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a7f      	ldr	r2, [pc, #508]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 800114a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	e02e      	b.n	80011b0 <HAL_RCC_OscConfig+0xd4>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10c      	bne.n	8001174 <HAL_RCC_OscConfig+0x98>
 800115a:	4b7b      	ldr	r3, [pc, #492]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a7a      	ldr	r2, [pc, #488]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001160:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	4b78      	ldr	r3, [pc, #480]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a77      	ldr	r2, [pc, #476]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 800116c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	e01d      	b.n	80011b0 <HAL_RCC_OscConfig+0xd4>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800117c:	d10c      	bne.n	8001198 <HAL_RCC_OscConfig+0xbc>
 800117e:	4b72      	ldr	r3, [pc, #456]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a71      	ldr	r2, [pc, #452]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001184:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	4b6f      	ldr	r3, [pc, #444]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a6e      	ldr	r2, [pc, #440]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e00b      	b.n	80011b0 <HAL_RCC_OscConfig+0xd4>
 8001198:	4b6b      	ldr	r3, [pc, #428]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a6a      	ldr	r2, [pc, #424]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 800119e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	4b68      	ldr	r3, [pc, #416]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a67      	ldr	r2, [pc, #412]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 80011aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d013      	beq.n	80011e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b8:	f7ff fbee 	bl	8000998 <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c0:	f7ff fbea 	bl	8000998 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b64      	cmp	r3, #100	@ 0x64
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e200      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d2:	4b5d      	ldr	r3, [pc, #372]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0f0      	beq.n	80011c0 <HAL_RCC_OscConfig+0xe4>
 80011de:	e014      	b.n	800120a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e0:	f7ff fbda 	bl	8000998 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e8:	f7ff fbd6 	bl	8000998 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b64      	cmp	r3, #100	@ 0x64
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e1ec      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fa:	4b53      	ldr	r3, [pc, #332]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f0      	bne.n	80011e8 <HAL_RCC_OscConfig+0x10c>
 8001206:	e000      	b.n	800120a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d063      	beq.n	80012de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001216:	4b4c      	ldr	r3, [pc, #304]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 030c 	and.w	r3, r3, #12
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00b      	beq.n	800123a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001222:	4b49      	ldr	r3, [pc, #292]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 030c 	and.w	r3, r3, #12
 800122a:	2b08      	cmp	r3, #8
 800122c:	d11c      	bne.n	8001268 <HAL_RCC_OscConfig+0x18c>
 800122e:	4b46      	ldr	r3, [pc, #280]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d116      	bne.n	8001268 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123a:	4b43      	ldr	r3, [pc, #268]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d005      	beq.n	8001252 <HAL_RCC_OscConfig+0x176>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d001      	beq.n	8001252 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e1c0      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001252:	4b3d      	ldr	r3, [pc, #244]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	4939      	ldr	r1, [pc, #228]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001262:	4313      	orrs	r3, r2
 8001264:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001266:	e03a      	b.n	80012de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d020      	beq.n	80012b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001270:	4b36      	ldr	r3, [pc, #216]	@ (800134c <HAL_RCC_OscConfig+0x270>)
 8001272:	2201      	movs	r2, #1
 8001274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001276:	f7ff fb8f 	bl	8000998 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800127e:	f7ff fb8b 	bl	8000998 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e1a1      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001290:	4b2d      	ldr	r3, [pc, #180]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d0f0      	beq.n	800127e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129c:	4b2a      	ldr	r3, [pc, #168]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	4927      	ldr	r1, [pc, #156]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	600b      	str	r3, [r1, #0]
 80012b0:	e015      	b.n	80012de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012b2:	4b26      	ldr	r3, [pc, #152]	@ (800134c <HAL_RCC_OscConfig+0x270>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fb6e 	bl	8000998 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012c0:	f7ff fb6a 	bl	8000998 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e180      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f0      	bne.n	80012c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d03a      	beq.n	8001360 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d019      	beq.n	8001326 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012f2:	4b17      	ldr	r3, [pc, #92]	@ (8001350 <HAL_RCC_OscConfig+0x274>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f8:	f7ff fb4e 	bl	8000998 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001300:	f7ff fb4a 	bl	8000998 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e160      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001312:	4b0d      	ldr	r3, [pc, #52]	@ (8001348 <HAL_RCC_OscConfig+0x26c>)
 8001314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f0      	beq.n	8001300 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800131e:	2001      	movs	r0, #1
 8001320:	f000 face 	bl	80018c0 <RCC_Delay>
 8001324:	e01c      	b.n	8001360 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001326:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <HAL_RCC_OscConfig+0x274>)
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132c:	f7ff fb34 	bl	8000998 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001332:	e00f      	b.n	8001354 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001334:	f7ff fb30 	bl	8000998 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d908      	bls.n	8001354 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e146      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000
 800134c:	42420000 	.word	0x42420000
 8001350:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001354:	4b92      	ldr	r3, [pc, #584]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1e9      	bne.n	8001334 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 80a6 	beq.w	80014ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800136e:	2300      	movs	r3, #0
 8001370:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001372:	4b8b      	ldr	r3, [pc, #556]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d10d      	bne.n	800139a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800137e:	4b88      	ldr	r3, [pc, #544]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	4a87      	ldr	r2, [pc, #540]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001388:	61d3      	str	r3, [r2, #28]
 800138a:	4b85      	ldr	r3, [pc, #532]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001396:	2301      	movs	r3, #1
 8001398:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139a:	4b82      	ldr	r3, [pc, #520]	@ (80015a4 <HAL_RCC_OscConfig+0x4c8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d118      	bne.n	80013d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013a6:	4b7f      	ldr	r3, [pc, #508]	@ (80015a4 <HAL_RCC_OscConfig+0x4c8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a7e      	ldr	r2, [pc, #504]	@ (80015a4 <HAL_RCC_OscConfig+0x4c8>)
 80013ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013b2:	f7ff faf1 	bl	8000998 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ba:	f7ff faed 	bl	8000998 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b64      	cmp	r3, #100	@ 0x64
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e103      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013cc:	4b75      	ldr	r3, [pc, #468]	@ (80015a4 <HAL_RCC_OscConfig+0x4c8>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d106      	bne.n	80013ee <HAL_RCC_OscConfig+0x312>
 80013e0:	4b6f      	ldr	r3, [pc, #444]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	4a6e      	ldr	r2, [pc, #440]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	6213      	str	r3, [r2, #32]
 80013ec:	e02d      	b.n	800144a <HAL_RCC_OscConfig+0x36e>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10c      	bne.n	8001410 <HAL_RCC_OscConfig+0x334>
 80013f6:	4b6a      	ldr	r3, [pc, #424]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	4a69      	ldr	r2, [pc, #420]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 80013fc:	f023 0301 	bic.w	r3, r3, #1
 8001400:	6213      	str	r3, [r2, #32]
 8001402:	4b67      	ldr	r3, [pc, #412]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	4a66      	ldr	r2, [pc, #408]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001408:	f023 0304 	bic.w	r3, r3, #4
 800140c:	6213      	str	r3, [r2, #32]
 800140e:	e01c      	b.n	800144a <HAL_RCC_OscConfig+0x36e>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	2b05      	cmp	r3, #5
 8001416:	d10c      	bne.n	8001432 <HAL_RCC_OscConfig+0x356>
 8001418:	4b61      	ldr	r3, [pc, #388]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	4a60      	ldr	r2, [pc, #384]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 800141e:	f043 0304 	orr.w	r3, r3, #4
 8001422:	6213      	str	r3, [r2, #32]
 8001424:	4b5e      	ldr	r3, [pc, #376]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	4a5d      	ldr	r2, [pc, #372]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6213      	str	r3, [r2, #32]
 8001430:	e00b      	b.n	800144a <HAL_RCC_OscConfig+0x36e>
 8001432:	4b5b      	ldr	r3, [pc, #364]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	4a5a      	ldr	r2, [pc, #360]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001438:	f023 0301 	bic.w	r3, r3, #1
 800143c:	6213      	str	r3, [r2, #32]
 800143e:	4b58      	ldr	r3, [pc, #352]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001440:	6a1b      	ldr	r3, [r3, #32]
 8001442:	4a57      	ldr	r2, [pc, #348]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001444:	f023 0304 	bic.w	r3, r3, #4
 8001448:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d015      	beq.n	800147e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001452:	f7ff faa1 	bl	8000998 <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001458:	e00a      	b.n	8001470 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800145a:	f7ff fa9d 	bl	8000998 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001468:	4293      	cmp	r3, r2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e0b1      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001470:	4b4b      	ldr	r3, [pc, #300]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0ee      	beq.n	800145a <HAL_RCC_OscConfig+0x37e>
 800147c:	e014      	b.n	80014a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147e:	f7ff fa8b 	bl	8000998 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001484:	e00a      	b.n	800149c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001486:	f7ff fa87 	bl	8000998 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001494:	4293      	cmp	r3, r2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e09b      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800149c:	4b40      	ldr	r3, [pc, #256]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1ee      	bne.n	8001486 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014a8:	7dfb      	ldrb	r3, [r7, #23]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d105      	bne.n	80014ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ae:	4b3c      	ldr	r3, [pc, #240]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	4a3b      	ldr	r2, [pc, #236]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 80014b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 8087 	beq.w	80015d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014c4:	4b36      	ldr	r3, [pc, #216]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 030c 	and.w	r3, r3, #12
 80014cc:	2b08      	cmp	r3, #8
 80014ce:	d061      	beq.n	8001594 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d146      	bne.n	8001566 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d8:	4b33      	ldr	r3, [pc, #204]	@ (80015a8 <HAL_RCC_OscConfig+0x4cc>)
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014de:	f7ff fa5b 	bl	8000998 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e6:	f7ff fa57 	bl	8000998 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e06d      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014f8:	4b29      	ldr	r3, [pc, #164]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1f0      	bne.n	80014e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800150c:	d108      	bne.n	8001520 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800150e:	4b24      	ldr	r3, [pc, #144]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	4921      	ldr	r1, [pc, #132]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001520:	4b1f      	ldr	r3, [pc, #124]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a19      	ldr	r1, [r3, #32]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001530:	430b      	orrs	r3, r1
 8001532:	491b      	ldr	r1, [pc, #108]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001534:	4313      	orrs	r3, r2
 8001536:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001538:	4b1b      	ldr	r3, [pc, #108]	@ (80015a8 <HAL_RCC_OscConfig+0x4cc>)
 800153a:	2201      	movs	r2, #1
 800153c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153e:	f7ff fa2b 	bl	8000998 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001546:	f7ff fa27 	bl	8000998 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e03d      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001558:	4b11      	ldr	r3, [pc, #68]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0f0      	beq.n	8001546 <HAL_RCC_OscConfig+0x46a>
 8001564:	e035      	b.n	80015d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001566:	4b10      	ldr	r3, [pc, #64]	@ (80015a8 <HAL_RCC_OscConfig+0x4cc>)
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fa14 	bl	8000998 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001574:	f7ff fa10 	bl	8000998 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e026      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001586:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <HAL_RCC_OscConfig+0x4c4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x498>
 8001592:	e01e      	b.n	80015d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69db      	ldr	r3, [r3, #28]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d107      	bne.n	80015ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e019      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40007000 	.word	0x40007000
 80015a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015ac:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <HAL_RCC_OscConfig+0x500>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d106      	bne.n	80015ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d001      	beq.n	80015d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e000      	b.n	80015d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40021000 	.word	0x40021000

080015e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0d0      	b.n	8001796 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015f4:	4b6a      	ldr	r3, [pc, #424]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d910      	bls.n	8001624 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001602:	4b67      	ldr	r3, [pc, #412]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f023 0207 	bic.w	r2, r3, #7
 800160a:	4965      	ldr	r1, [pc, #404]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	4313      	orrs	r3, r2
 8001610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001612:	4b63      	ldr	r3, [pc, #396]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	429a      	cmp	r2, r3
 800161e:	d001      	beq.n	8001624 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e0b8      	b.n	8001796 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d020      	beq.n	8001672 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b00      	cmp	r3, #0
 800163a:	d005      	beq.n	8001648 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800163c:	4b59      	ldr	r3, [pc, #356]	@ (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	4a58      	ldr	r2, [pc, #352]	@ (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001642:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001646:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	2b00      	cmp	r3, #0
 8001652:	d005      	beq.n	8001660 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001654:	4b53      	ldr	r3, [pc, #332]	@ (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	4a52      	ldr	r2, [pc, #328]	@ (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 800165a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800165e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001660:	4b50      	ldr	r3, [pc, #320]	@ (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	494d      	ldr	r1, [pc, #308]	@ (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 800166e:	4313      	orrs	r3, r2
 8001670:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b00      	cmp	r3, #0
 800167c:	d040      	beq.n	8001700 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d107      	bne.n	8001696 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001686:	4b47      	ldr	r3, [pc, #284]	@ (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d115      	bne.n	80016be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e07f      	b.n	8001796 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b02      	cmp	r3, #2
 800169c:	d107      	bne.n	80016ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169e:	4b41      	ldr	r3, [pc, #260]	@ (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d109      	bne.n	80016be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e073      	b.n	8001796 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ae:	4b3d      	ldr	r3, [pc, #244]	@ (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e06b      	b.n	8001796 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016be:	4b39      	ldr	r3, [pc, #228]	@ (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f023 0203 	bic.w	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4936      	ldr	r1, [pc, #216]	@ (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016d0:	f7ff f962 	bl	8000998 <HAL_GetTick>
 80016d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d6:	e00a      	b.n	80016ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d8:	f7ff f95e 	bl	8000998 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e053      	b.n	8001796 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ee:	4b2d      	ldr	r3, [pc, #180]	@ (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 020c 	and.w	r2, r3, #12
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d1eb      	bne.n	80016d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001700:	4b27      	ldr	r3, [pc, #156]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	d210      	bcs.n	8001730 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170e:	4b24      	ldr	r3, [pc, #144]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f023 0207 	bic.w	r2, r3, #7
 8001716:	4922      	ldr	r1, [pc, #136]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	4313      	orrs	r3, r2
 800171c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800171e:	4b20      	ldr	r3, [pc, #128]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d001      	beq.n	8001730 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e032      	b.n	8001796 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	2b00      	cmp	r3, #0
 800173a:	d008      	beq.n	800174e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800173c:	4b19      	ldr	r3, [pc, #100]	@ (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	4916      	ldr	r1, [pc, #88]	@ (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 800174a:	4313      	orrs	r3, r2
 800174c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0308 	and.w	r3, r3, #8
 8001756:	2b00      	cmp	r3, #0
 8001758:	d009      	beq.n	800176e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800175a:	4b12      	ldr	r3, [pc, #72]	@ (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	490e      	ldr	r1, [pc, #56]	@ (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 800176a:	4313      	orrs	r3, r2
 800176c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800176e:	f000 f821 	bl	80017b4 <HAL_RCC_GetSysClockFreq>
 8001772:	4602      	mov	r2, r0
 8001774:	4b0b      	ldr	r3, [pc, #44]	@ (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	091b      	lsrs	r3, r3, #4
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	490a      	ldr	r1, [pc, #40]	@ (80017a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001780:	5ccb      	ldrb	r3, [r1, r3]
 8001782:	fa22 f303 	lsr.w	r3, r2, r3
 8001786:	4a09      	ldr	r2, [pc, #36]	@ (80017ac <HAL_RCC_ClockConfig+0x1cc>)
 8001788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800178a:	4b09      	ldr	r3, [pc, #36]	@ (80017b0 <HAL_RCC_ClockConfig+0x1d0>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff f8c0 	bl	8000914 <HAL_InitTick>

  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40022000 	.word	0x40022000
 80017a4:	40021000 	.word	0x40021000
 80017a8:	08003828 	.word	0x08003828
 80017ac:	20000000 	.word	0x20000000
 80017b0:	20000004 	.word	0x20000004

080017b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x94>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b04      	cmp	r3, #4
 80017dc:	d002      	beq.n	80017e4 <HAL_RCC_GetSysClockFreq+0x30>
 80017de:	2b08      	cmp	r3, #8
 80017e0:	d003      	beq.n	80017ea <HAL_RCC_GetSysClockFreq+0x36>
 80017e2:	e027      	b.n	8001834 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017e4:	4b19      	ldr	r3, [pc, #100]	@ (800184c <HAL_RCC_GetSysClockFreq+0x98>)
 80017e6:	613b      	str	r3, [r7, #16]
      break;
 80017e8:	e027      	b.n	800183a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	0c9b      	lsrs	r3, r3, #18
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	4a17      	ldr	r2, [pc, #92]	@ (8001850 <HAL_RCC_GetSysClockFreq+0x9c>)
 80017f4:	5cd3      	ldrb	r3, [r2, r3]
 80017f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d010      	beq.n	8001824 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001802:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <HAL_RCC_GetSysClockFreq+0x94>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	0c5b      	lsrs	r3, r3, #17
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	4a11      	ldr	r2, [pc, #68]	@ (8001854 <HAL_RCC_GetSysClockFreq+0xa0>)
 800180e:	5cd3      	ldrb	r3, [r2, r3]
 8001810:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a0d      	ldr	r2, [pc, #52]	@ (800184c <HAL_RCC_GetSysClockFreq+0x98>)
 8001816:	fb03 f202 	mul.w	r2, r3, r2
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	e004      	b.n	800182e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a0c      	ldr	r2, [pc, #48]	@ (8001858 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001828:	fb02 f303 	mul.w	r3, r2, r3
 800182c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	613b      	str	r3, [r7, #16]
      break;
 8001832:	e002      	b.n	800183a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001834:	4b05      	ldr	r3, [pc, #20]	@ (800184c <HAL_RCC_GetSysClockFreq+0x98>)
 8001836:	613b      	str	r3, [r7, #16]
      break;
 8001838:	bf00      	nop
    }
  }
  return sysclockfreq;
 800183a:	693b      	ldr	r3, [r7, #16]
}
 800183c:	4618      	mov	r0, r3
 800183e:	371c      	adds	r7, #28
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000
 800184c:	007a1200 	.word	0x007a1200
 8001850:	08003840 	.word	0x08003840
 8001854:	08003850 	.word	0x08003850
 8001858:	003d0900 	.word	0x003d0900

0800185c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001860:	4b02      	ldr	r3, [pc, #8]	@ (800186c <HAL_RCC_GetHCLKFreq+0x10>)
 8001862:	681b      	ldr	r3, [r3, #0]
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	20000000 	.word	0x20000000

08001870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001874:	f7ff fff2 	bl	800185c <HAL_RCC_GetHCLKFreq>
 8001878:	4602      	mov	r2, r0
 800187a:	4b05      	ldr	r3, [pc, #20]	@ (8001890 <HAL_RCC_GetPCLK1Freq+0x20>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	0a1b      	lsrs	r3, r3, #8
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	4903      	ldr	r1, [pc, #12]	@ (8001894 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001886:	5ccb      	ldrb	r3, [r1, r3]
 8001888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800188c:	4618      	mov	r0, r3
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40021000 	.word	0x40021000
 8001894:	08003838 	.word	0x08003838

08001898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800189c:	f7ff ffde 	bl	800185c <HAL_RCC_GetHCLKFreq>
 80018a0:	4602      	mov	r2, r0
 80018a2:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	0adb      	lsrs	r3, r3, #11
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	4903      	ldr	r1, [pc, #12]	@ (80018bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80018ae:	5ccb      	ldrb	r3, [r1, r3]
 80018b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40021000 	.word	0x40021000
 80018bc:	08003838 	.word	0x08003838

080018c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018c8:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <RCC_Delay+0x34>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0a      	ldr	r2, [pc, #40]	@ (80018f8 <RCC_Delay+0x38>)
 80018ce:	fba2 2303 	umull	r2, r3, r2, r3
 80018d2:	0a5b      	lsrs	r3, r3, #9
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	fb02 f303 	mul.w	r3, r2, r3
 80018da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018dc:	bf00      	nop
  }
  while (Delay --);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1e5a      	subs	r2, r3, #1
 80018e2:	60fa      	str	r2, [r7, #12]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f9      	bne.n	80018dc <RCC_Delay+0x1c>
}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	20000000 	.word	0x20000000
 80018f8:	10624dd3 	.word	0x10624dd3

080018fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e041      	b.n	8001992 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d106      	bne.n	8001928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7fe fe74 	bl	8000610 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2202      	movs	r2, #2
 800192c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3304      	adds	r3, #4
 8001938:	4619      	mov	r1, r3
 800193a:	4610      	mov	r0, r2
 800193c:	f000 fa64 	bl	8001e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d001      	beq.n	80019b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e03a      	b.n	8001a2a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2202      	movs	r2, #2
 80019b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68da      	ldr	r2, [r3, #12]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0201 	orr.w	r2, r2, #1
 80019ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a18      	ldr	r2, [pc, #96]	@ (8001a34 <HAL_TIM_Base_Start_IT+0x98>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d00e      	beq.n	80019f4 <HAL_TIM_Base_Start_IT+0x58>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019de:	d009      	beq.n	80019f4 <HAL_TIM_Base_Start_IT+0x58>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a14      	ldr	r2, [pc, #80]	@ (8001a38 <HAL_TIM_Base_Start_IT+0x9c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d004      	beq.n	80019f4 <HAL_TIM_Base_Start_IT+0x58>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a13      	ldr	r2, [pc, #76]	@ (8001a3c <HAL_TIM_Base_Start_IT+0xa0>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d111      	bne.n	8001a18 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2b06      	cmp	r3, #6
 8001a04:	d010      	beq.n	8001a28 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f042 0201 	orr.w	r2, r2, #1
 8001a14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a16:	e007      	b.n	8001a28 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0201 	orr.w	r2, r2, #1
 8001a26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	40012c00 	.word	0x40012c00
 8001a38:	40000400 	.word	0x40000400
 8001a3c:	40000800 	.word	0x40000800

08001a40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d020      	beq.n	8001aa4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d01b      	beq.n	8001aa4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f06f 0202 	mvn.w	r2, #2
 8001a74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f9a1 	bl	8001dd2 <HAL_TIM_IC_CaptureCallback>
 8001a90:	e005      	b.n	8001a9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f994 	bl	8001dc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f9a3 	bl	8001de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d020      	beq.n	8001af0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d01b      	beq.n	8001af0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f06f 0204 	mvn.w	r2, #4
 8001ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f97b 	bl	8001dd2 <HAL_TIM_IC_CaptureCallback>
 8001adc:	e005      	b.n	8001aea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f96e 	bl	8001dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 f97d 	bl	8001de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d020      	beq.n	8001b3c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d01b      	beq.n	8001b3c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f06f 0208 	mvn.w	r2, #8
 8001b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2204      	movs	r2, #4
 8001b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f955 	bl	8001dd2 <HAL_TIM_IC_CaptureCallback>
 8001b28:	e005      	b.n	8001b36 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f948 	bl	8001dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f957 	bl	8001de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d020      	beq.n	8001b88 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f003 0310 	and.w	r3, r3, #16
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d01b      	beq.n	8001b88 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f06f 0210 	mvn.w	r2, #16
 8001b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2208      	movs	r2, #8
 8001b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f92f 	bl	8001dd2 <HAL_TIM_IC_CaptureCallback>
 8001b74:	e005      	b.n	8001b82 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f922 	bl	8001dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f931 	bl	8001de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00c      	beq.n	8001bac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d007      	beq.n	8001bac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f06f 0201 	mvn.w	r2, #1
 8001ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f901 	bl	8001dae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00c      	beq.n	8001bd0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d007      	beq.n	8001bd0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 fa87 	bl	80020de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00c      	beq.n	8001bf4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d007      	beq.n	8001bf4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f901 	bl	8001df6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	f003 0320 	and.w	r3, r3, #32
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00c      	beq.n	8001c18 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f003 0320 	and.w	r3, r3, #32
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d007      	beq.n	8001c18 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f06f 0220 	mvn.w	r2, #32
 8001c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 fa5a 	bl	80020cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c18:	bf00      	nop
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <HAL_TIM_ConfigClockSource+0x1c>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e0b4      	b.n	8001da6 <HAL_TIM_ConfigClockSource+0x186>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001c5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001c62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68ba      	ldr	r2, [r7, #8]
 8001c6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c74:	d03e      	beq.n	8001cf4 <HAL_TIM_ConfigClockSource+0xd4>
 8001c76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c7a:	f200 8087 	bhi.w	8001d8c <HAL_TIM_ConfigClockSource+0x16c>
 8001c7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c82:	f000 8086 	beq.w	8001d92 <HAL_TIM_ConfigClockSource+0x172>
 8001c86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c8a:	d87f      	bhi.n	8001d8c <HAL_TIM_ConfigClockSource+0x16c>
 8001c8c:	2b70      	cmp	r3, #112	@ 0x70
 8001c8e:	d01a      	beq.n	8001cc6 <HAL_TIM_ConfigClockSource+0xa6>
 8001c90:	2b70      	cmp	r3, #112	@ 0x70
 8001c92:	d87b      	bhi.n	8001d8c <HAL_TIM_ConfigClockSource+0x16c>
 8001c94:	2b60      	cmp	r3, #96	@ 0x60
 8001c96:	d050      	beq.n	8001d3a <HAL_TIM_ConfigClockSource+0x11a>
 8001c98:	2b60      	cmp	r3, #96	@ 0x60
 8001c9a:	d877      	bhi.n	8001d8c <HAL_TIM_ConfigClockSource+0x16c>
 8001c9c:	2b50      	cmp	r3, #80	@ 0x50
 8001c9e:	d03c      	beq.n	8001d1a <HAL_TIM_ConfigClockSource+0xfa>
 8001ca0:	2b50      	cmp	r3, #80	@ 0x50
 8001ca2:	d873      	bhi.n	8001d8c <HAL_TIM_ConfigClockSource+0x16c>
 8001ca4:	2b40      	cmp	r3, #64	@ 0x40
 8001ca6:	d058      	beq.n	8001d5a <HAL_TIM_ConfigClockSource+0x13a>
 8001ca8:	2b40      	cmp	r3, #64	@ 0x40
 8001caa:	d86f      	bhi.n	8001d8c <HAL_TIM_ConfigClockSource+0x16c>
 8001cac:	2b30      	cmp	r3, #48	@ 0x30
 8001cae:	d064      	beq.n	8001d7a <HAL_TIM_ConfigClockSource+0x15a>
 8001cb0:	2b30      	cmp	r3, #48	@ 0x30
 8001cb2:	d86b      	bhi.n	8001d8c <HAL_TIM_ConfigClockSource+0x16c>
 8001cb4:	2b20      	cmp	r3, #32
 8001cb6:	d060      	beq.n	8001d7a <HAL_TIM_ConfigClockSource+0x15a>
 8001cb8:	2b20      	cmp	r3, #32
 8001cba:	d867      	bhi.n	8001d8c <HAL_TIM_ConfigClockSource+0x16c>
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d05c      	beq.n	8001d7a <HAL_TIM_ConfigClockSource+0x15a>
 8001cc0:	2b10      	cmp	r3, #16
 8001cc2:	d05a      	beq.n	8001d7a <HAL_TIM_ConfigClockSource+0x15a>
 8001cc4:	e062      	b.n	8001d8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001cd6:	f000 f97c 	bl	8001fd2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001ce8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	609a      	str	r2, [r3, #8]
      break;
 8001cf2:	e04f      	b.n	8001d94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d04:	f000 f965 	bl	8001fd2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d16:	609a      	str	r2, [r3, #8]
      break;
 8001d18:	e03c      	b.n	8001d94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d26:	461a      	mov	r2, r3
 8001d28:	f000 f8dc 	bl	8001ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2150      	movs	r1, #80	@ 0x50
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 f933 	bl	8001f9e <TIM_ITRx_SetConfig>
      break;
 8001d38:	e02c      	b.n	8001d94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d46:	461a      	mov	r2, r3
 8001d48:	f000 f8fa 	bl	8001f40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2160      	movs	r1, #96	@ 0x60
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 f923 	bl	8001f9e <TIM_ITRx_SetConfig>
      break;
 8001d58:	e01c      	b.n	8001d94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d66:	461a      	mov	r2, r3
 8001d68:	f000 f8bc 	bl	8001ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2140      	movs	r1, #64	@ 0x40
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 f913 	bl	8001f9e <TIM_ITRx_SetConfig>
      break;
 8001d78:	e00c      	b.n	8001d94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4619      	mov	r1, r3
 8001d84:	4610      	mov	r0, r2
 8001d86:	f000 f90a 	bl	8001f9e <TIM_ITRx_SetConfig>
      break;
 8001d8a:	e003      	b.n	8001d94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d90:	e000      	b.n	8001d94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001d92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr

08001dd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr

08001de4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr

08001df6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr

08001e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a2f      	ldr	r2, [pc, #188]	@ (8001ed8 <TIM_Base_SetConfig+0xd0>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d00b      	beq.n	8001e38 <TIM_Base_SetConfig+0x30>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e26:	d007      	beq.n	8001e38 <TIM_Base_SetConfig+0x30>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a2c      	ldr	r2, [pc, #176]	@ (8001edc <TIM_Base_SetConfig+0xd4>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d003      	beq.n	8001e38 <TIM_Base_SetConfig+0x30>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a2b      	ldr	r2, [pc, #172]	@ (8001ee0 <TIM_Base_SetConfig+0xd8>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d108      	bne.n	8001e4a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a22      	ldr	r2, [pc, #136]	@ (8001ed8 <TIM_Base_SetConfig+0xd0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00b      	beq.n	8001e6a <TIM_Base_SetConfig+0x62>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e58:	d007      	beq.n	8001e6a <TIM_Base_SetConfig+0x62>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a1f      	ldr	r2, [pc, #124]	@ (8001edc <TIM_Base_SetConfig+0xd4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d003      	beq.n	8001e6a <TIM_Base_SetConfig+0x62>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a1e      	ldr	r2, [pc, #120]	@ (8001ee0 <TIM_Base_SetConfig+0xd8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d108      	bne.n	8001e7c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a0d      	ldr	r2, [pc, #52]	@ (8001ed8 <TIM_Base_SetConfig+0xd0>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d103      	bne.n	8001eb0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d005      	beq.n	8001ece <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	f023 0201 	bic.w	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	611a      	str	r2, [r3, #16]
  }
}
 8001ece:	bf00      	nop
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr
 8001ed8:	40012c00 	.word	0x40012c00
 8001edc:	40000400 	.word	0x40000400
 8001ee0:	40000800 	.word	0x40000800

08001ee4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	f023 0201 	bic.w	r2, r3, #1
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	011b      	lsls	r3, r3, #4
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f023 030a 	bic.w	r3, r3, #10
 8001f20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	621a      	str	r2, [r3, #32]
}
 8001f36:	bf00      	nop
 8001f38:	371c      	adds	r7, #28
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b087      	sub	sp, #28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	f023 0210 	bic.w	r2, r3, #16
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	031b      	lsls	r3, r3, #12
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001f7c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	011b      	lsls	r3, r3, #4
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	621a      	str	r2, [r3, #32]
}
 8001f94:	bf00      	nop
 8001f96:	371c      	adds	r7, #28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr

08001f9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b085      	sub	sp, #20
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	f043 0307 	orr.w	r3, r3, #7
 8001fc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	609a      	str	r2, [r3, #8]
}
 8001fc8:	bf00      	nop
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr

08001fd2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b087      	sub	sp, #28
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	60f8      	str	r0, [r7, #12]
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
 8001fde:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001fec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	021a      	lsls	r2, r3, #8
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	609a      	str	r2, [r3, #8]
}
 8002006:	bf00      	nop
 8002008:	371c      	adds	r7, #28
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002024:	2302      	movs	r3, #2
 8002026:	e046      	b.n	80020b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2202      	movs	r2, #2
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800204e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a16      	ldr	r2, [pc, #88]	@ (80020c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d00e      	beq.n	800208a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002074:	d009      	beq.n	800208a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a12      	ldr	r2, [pc, #72]	@ (80020c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d004      	beq.n	800208a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a10      	ldr	r2, [pc, #64]	@ (80020c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d10c      	bne.n	80020a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002090:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	4313      	orrs	r3, r2
 800209a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	40012c00 	.word	0x40012c00
 80020c4:	40000400 	.word	0x40000400
 80020c8:	40000800 	.word	0x40000800

080020cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr

080020de <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr

080020f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e042      	b.n	8002188 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d106      	bne.n	800211c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7fe fa9e 	bl	8000658 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2224      	movs	r2, #36	@ 0x24
 8002120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68da      	ldr	r2, [r3, #12]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002132:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 fdf9 	bl	8002d2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	691a      	ldr	r2, [r3, #16]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002148:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	695a      	ldr	r2, [r3, #20]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002158:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002168:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2220      	movs	r2, #32
 8002174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2220      	movs	r2, #32
 800217c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08a      	sub	sp, #40	@ 0x28
 8002194:	af02      	add	r7, sp, #8
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	4613      	mov	r3, r2
 800219e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b20      	cmp	r3, #32
 80021ae:	d175      	bne.n	800229c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d002      	beq.n	80021bc <HAL_UART_Transmit+0x2c>
 80021b6:	88fb      	ldrh	r3, [r7, #6]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e06e      	b.n	800229e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2221      	movs	r2, #33	@ 0x21
 80021ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021ce:	f7fe fbe3 	bl	8000998 <HAL_GetTick>
 80021d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	88fa      	ldrh	r2, [r7, #6]
 80021d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	88fa      	ldrh	r2, [r7, #6]
 80021de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021e8:	d108      	bne.n	80021fc <HAL_UART_Transmit+0x6c>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d104      	bne.n	80021fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	61bb      	str	r3, [r7, #24]
 80021fa:	e003      	b.n	8002204 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002200:	2300      	movs	r3, #0
 8002202:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002204:	e02e      	b.n	8002264 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	2200      	movs	r2, #0
 800220e:	2180      	movs	r1, #128	@ 0x80
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 fb97 	bl	8002944 <UART_WaitOnFlagUntilTimeout>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2220      	movs	r2, #32
 8002220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e03a      	b.n	800229e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10b      	bne.n	8002246 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800223c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	3302      	adds	r3, #2
 8002242:	61bb      	str	r3, [r7, #24]
 8002244:	e007      	b.n	8002256 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	781a      	ldrb	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	3301      	adds	r3, #1
 8002254:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800225a:	b29b      	uxth	r3, r3
 800225c:	3b01      	subs	r3, #1
 800225e:	b29a      	uxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002268:	b29b      	uxth	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1cb      	bne.n	8002206 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2200      	movs	r2, #0
 8002276:	2140      	movs	r1, #64	@ 0x40
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 fb63 	bl	8002944 <UART_WaitOnFlagUntilTimeout>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2220      	movs	r2, #32
 8002288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e006      	b.n	800229e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2220      	movs	r2, #32
 8002294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002298:	2300      	movs	r3, #0
 800229a:	e000      	b.n	800229e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800229c:	2302      	movs	r3, #2
  }
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3720      	adds	r7, #32
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b08a      	sub	sp, #40	@ 0x28
 80022aa:	af02      	add	r7, sp, #8
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	603b      	str	r3, [r7, #0]
 80022b2:	4613      	mov	r3, r2
 80022b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	f040 8081 	bne.w	80023ca <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <HAL_UART_Receive+0x2e>
 80022ce:	88fb      	ldrh	r3, [r7, #6]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e079      	b.n	80023cc <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2222      	movs	r2, #34	@ 0x22
 80022e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022ec:	f7fe fb54 	bl	8000998 <HAL_GetTick>
 80022f0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	88fa      	ldrh	r2, [r7, #6]
 80022f6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	88fa      	ldrh	r2, [r7, #6]
 80022fc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002306:	d108      	bne.n	800231a <HAL_UART_Receive+0x74>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d104      	bne.n	800231a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002310:	2300      	movs	r3, #0
 8002312:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	61bb      	str	r3, [r7, #24]
 8002318:	e003      	b.n	8002322 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800231e:	2300      	movs	r3, #0
 8002320:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002322:	e047      	b.n	80023b4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	2200      	movs	r2, #0
 800232c:	2120      	movs	r1, #32
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 fb08 	bl	8002944 <UART_WaitOnFlagUntilTimeout>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d005      	beq.n	8002346 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2220      	movs	r2, #32
 800233e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e042      	b.n	80023cc <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10c      	bne.n	8002366 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	b29b      	uxth	r3, r3
 8002354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002358:	b29a      	uxth	r2, r3
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	3302      	adds	r3, #2
 8002362:	61bb      	str	r3, [r7, #24]
 8002364:	e01f      	b.n	80023a6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800236e:	d007      	beq.n	8002380 <HAL_UART_Receive+0xda>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10a      	bne.n	800238e <HAL_UART_Receive+0xe8>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d106      	bne.n	800238e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	b2da      	uxtb	r2, r3
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	701a      	strb	r2, [r3, #0]
 800238c:	e008      	b.n	80023a0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800239a:	b2da      	uxtb	r2, r3
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	3301      	adds	r3, #1
 80023a4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1b2      	bne.n	8002324 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2220      	movs	r2, #32
 80023c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	e000      	b.n	80023cc <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80023ca:	2302      	movs	r3, #2
  }
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3720      	adds	r7, #32
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b0ba      	sub	sp, #232	@ 0xe8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002400:	2300      	movs	r3, #0
 8002402:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002412:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10f      	bne.n	800243a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800241a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800241e:	f003 0320 	and.w	r3, r3, #32
 8002422:	2b00      	cmp	r3, #0
 8002424:	d009      	beq.n	800243a <HAL_UART_IRQHandler+0x66>
 8002426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800242a:	f003 0320 	and.w	r3, r3, #32
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 fbbc 	bl	8002bb0 <UART_Receive_IT>
      return;
 8002438:	e25b      	b.n	80028f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800243a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 80de 	beq.w	8002600 <HAL_UART_IRQHandler+0x22c>
 8002444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d106      	bne.n	800245e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002454:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 80d1 	beq.w	8002600 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800245e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00b      	beq.n	8002482 <HAL_UART_IRQHandler+0xae>
 800246a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800246e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002472:	2b00      	cmp	r3, #0
 8002474:	d005      	beq.n	8002482 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247a:	f043 0201 	orr.w	r2, r3, #1
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00b      	beq.n	80024a6 <HAL_UART_IRQHandler+0xd2>
 800248e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d005      	beq.n	80024a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249e:	f043 0202 	orr.w	r2, r3, #2
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00b      	beq.n	80024ca <HAL_UART_IRQHandler+0xf6>
 80024b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d005      	beq.n	80024ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c2:	f043 0204 	orr.w	r2, r3, #4
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80024ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d011      	beq.n	80024fa <HAL_UART_IRQHandler+0x126>
 80024d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024da:	f003 0320 	and.w	r3, r3, #32
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d105      	bne.n	80024ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80024e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d005      	beq.n	80024fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f2:	f043 0208 	orr.w	r2, r3, #8
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 81f2 	beq.w	80028e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002508:	f003 0320 	and.w	r3, r3, #32
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_UART_IRQHandler+0x14e>
 8002510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002514:	f003 0320 	and.w	r3, r3, #32
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 fb47 	bl	8002bb0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800252c:	2b00      	cmp	r3, #0
 800252e:	bf14      	ite	ne
 8002530:	2301      	movne	r3, #1
 8002532:	2300      	moveq	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d103      	bne.n	800254e <HAL_UART_IRQHandler+0x17a>
 8002546:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800254a:	2b00      	cmp	r3, #0
 800254c:	d04f      	beq.n	80025ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fa51 	bl	80029f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800255e:	2b00      	cmp	r3, #0
 8002560:	d041      	beq.n	80025e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	3314      	adds	r3, #20
 8002568:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800256c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002570:	e853 3f00 	ldrex	r3, [r3]
 8002574:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002578:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800257c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002580:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	3314      	adds	r3, #20
 800258a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800258e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002592:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002596:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800259a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800259e:	e841 2300 	strex	r3, r2, [r1]
 80025a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80025a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1d9      	bne.n	8002562 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d013      	beq.n	80025de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ba:	4a7e      	ldr	r2, [pc, #504]	@ (80027b4 <HAL_UART_IRQHandler+0x3e0>)
 80025bc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fb5e 	bl	8000c84 <HAL_DMA_Abort_IT>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d016      	beq.n	80025fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80025d8:	4610      	mov	r0, r2
 80025da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025dc:	e00e      	b.n	80025fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f99c 	bl	800291c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025e4:	e00a      	b.n	80025fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f998 	bl	800291c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025ec:	e006      	b.n	80025fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f994 	bl	800291c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80025fa:	e175      	b.n	80028e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025fc:	bf00      	nop
    return;
 80025fe:	e173      	b.n	80028e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002604:	2b01      	cmp	r3, #1
 8002606:	f040 814f 	bne.w	80028a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800260a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800260e:	f003 0310 	and.w	r3, r3, #16
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 8148 	beq.w	80028a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 8141 	beq.w	80028a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002626:	2300      	movs	r3, #0
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 80b6 	beq.w	80027b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002658:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 8145 	beq.w	80028ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002666:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800266a:	429a      	cmp	r2, r3
 800266c:	f080 813e 	bcs.w	80028ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002676:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	2b20      	cmp	r3, #32
 8002680:	f000 8088 	beq.w	8002794 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	330c      	adds	r3, #12
 800268a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800268e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002692:	e853 3f00 	ldrex	r3, [r3]
 8002696:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800269a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800269e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	330c      	adds	r3, #12
 80026ac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80026b0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80026b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80026bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80026c0:	e841 2300 	strex	r3, r2, [r1]
 80026c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80026c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1d9      	bne.n	8002684 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	3314      	adds	r3, #20
 80026d6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026da:	e853 3f00 	ldrex	r3, [r3]
 80026de:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80026e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026e2:	f023 0301 	bic.w	r3, r3, #1
 80026e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	3314      	adds	r3, #20
 80026f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80026f4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80026f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026fa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80026fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002700:	e841 2300 	strex	r3, r2, [r1]
 8002704:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002706:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1e1      	bne.n	80026d0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	3314      	adds	r3, #20
 8002712:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002714:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002716:	e853 3f00 	ldrex	r3, [r3]
 800271a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800271c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800271e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002722:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	3314      	adds	r3, #20
 800272c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002730:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002732:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002734:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002736:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002738:	e841 2300 	strex	r3, r2, [r1]
 800273c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800273e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1e3      	bne.n	800270c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	330c      	adds	r3, #12
 8002758:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800275a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800275c:	e853 3f00 	ldrex	r3, [r3]
 8002760:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002762:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002764:	f023 0310 	bic.w	r3, r3, #16
 8002768:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	330c      	adds	r3, #12
 8002772:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002776:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002778:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800277a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800277c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800277e:	e841 2300 	strex	r3, r2, [r1]
 8002782:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002784:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1e3      	bne.n	8002752 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800278e:	4618      	mov	r0, r3
 8002790:	f7fe fa3d 	bl	8000c0e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2202      	movs	r2, #2
 8002798:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	4619      	mov	r1, r3
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f8bf 	bl	800292e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027b0:	e09c      	b.n	80028ec <HAL_UART_IRQHandler+0x518>
 80027b2:	bf00      	nop
 80027b4:	08002abb 	.word	0x08002abb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 808e 	beq.w	80028f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80027d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 8089 	beq.w	80028f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	330c      	adds	r3, #12
 80027e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027e8:	e853 3f00 	ldrex	r3, [r3]
 80027ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80027ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80027f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	330c      	adds	r3, #12
 80027fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002802:	647a      	str	r2, [r7, #68]	@ 0x44
 8002804:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002806:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002808:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800280a:	e841 2300 	strex	r3, r2, [r1]
 800280e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1e3      	bne.n	80027de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	3314      	adds	r3, #20
 800281c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800281e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002820:	e853 3f00 	ldrex	r3, [r3]
 8002824:	623b      	str	r3, [r7, #32]
   return(result);
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	f023 0301 	bic.w	r3, r3, #1
 800282c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	3314      	adds	r3, #20
 8002836:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800283a:	633a      	str	r2, [r7, #48]	@ 0x30
 800283c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800283e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002840:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002842:	e841 2300 	strex	r3, r2, [r1]
 8002846:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1e3      	bne.n	8002816 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2220      	movs	r2, #32
 8002852:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	330c      	adds	r3, #12
 8002862:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	e853 3f00 	ldrex	r3, [r3]
 800286a:	60fb      	str	r3, [r7, #12]
   return(result);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f023 0310 	bic.w	r3, r3, #16
 8002872:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	330c      	adds	r3, #12
 800287c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002880:	61fa      	str	r2, [r7, #28]
 8002882:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002884:	69b9      	ldr	r1, [r7, #24]
 8002886:	69fa      	ldr	r2, [r7, #28]
 8002888:	e841 2300 	strex	r3, r2, [r1]
 800288c:	617b      	str	r3, [r7, #20]
   return(result);
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1e3      	bne.n	800285c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800289a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800289e:	4619      	mov	r1, r3
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f844 	bl	800292e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028a6:	e023      	b.n	80028f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d009      	beq.n	80028c8 <HAL_UART_IRQHandler+0x4f4>
 80028b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f90e 	bl	8002ae2 <UART_Transmit_IT>
    return;
 80028c6:	e014      	b.n	80028f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00e      	beq.n	80028f2 <HAL_UART_IRQHandler+0x51e>
 80028d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f94d 	bl	8002b80 <UART_EndTransmit_IT>
    return;
 80028e6:	e004      	b.n	80028f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80028e8:	bf00      	nop
 80028ea:	e002      	b.n	80028f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80028ec:	bf00      	nop
 80028ee:	e000      	b.n	80028f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80028f0:	bf00      	nop
  }
}
 80028f2:	37e8      	adds	r7, #232	@ 0xe8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr

0800290a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr

0800292e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
 8002936:	460b      	mov	r3, r1
 8002938:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr

08002944 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	4613      	mov	r3, r2
 8002952:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002954:	e03b      	b.n	80029ce <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295c:	d037      	beq.n	80029ce <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800295e:	f7fe f81b 	bl	8000998 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	6a3a      	ldr	r2, [r7, #32]
 800296a:	429a      	cmp	r2, r3
 800296c:	d302      	bcc.n	8002974 <UART_WaitOnFlagUntilTimeout+0x30>
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e03a      	b.n	80029ee <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	2b00      	cmp	r3, #0
 8002984:	d023      	beq.n	80029ce <UART_WaitOnFlagUntilTimeout+0x8a>
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2b80      	cmp	r3, #128	@ 0x80
 800298a:	d020      	beq.n	80029ce <UART_WaitOnFlagUntilTimeout+0x8a>
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2b40      	cmp	r3, #64	@ 0x40
 8002990:	d01d      	beq.n	80029ce <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b08      	cmp	r3, #8
 800299e:	d116      	bne.n	80029ce <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80029a0:	2300      	movs	r3, #0
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 f81d 	bl	80029f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2208      	movs	r2, #8
 80029c0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e00f      	b.n	80029ee <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	4013      	ands	r3, r2
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	429a      	cmp	r2, r3
 80029dc:	bf0c      	ite	eq
 80029de:	2301      	moveq	r3, #1
 80029e0:	2300      	movne	r3, #0
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d0b4      	beq.n	8002956 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b095      	sub	sp, #84	@ 0x54
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	330c      	adds	r3, #12
 8002a04:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a08:	e853 3f00 	ldrex	r3, [r3]
 8002a0c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	330c      	adds	r3, #12
 8002a1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a1e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a22:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002a24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002a26:	e841 2300 	strex	r3, r2, [r1]
 8002a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1e5      	bne.n	80029fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	3314      	adds	r3, #20
 8002a38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	e853 3f00 	ldrex	r3, [r3]
 8002a40:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	f023 0301 	bic.w	r3, r3, #1
 8002a48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	3314      	adds	r3, #20
 8002a50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a5a:	e841 2300 	strex	r3, r2, [r1]
 8002a5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1e5      	bne.n	8002a32 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d119      	bne.n	8002aa2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	330c      	adds	r3, #12
 8002a74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	e853 3f00 	ldrex	r3, [r3]
 8002a7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	f023 0310 	bic.w	r3, r3, #16
 8002a84:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	330c      	adds	r3, #12
 8002a8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a8e:	61ba      	str	r2, [r7, #24]
 8002a90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a92:	6979      	ldr	r1, [r7, #20]
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	e841 2300 	strex	r3, r2, [r1]
 8002a9a:	613b      	str	r3, [r7, #16]
   return(result);
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1e5      	bne.n	8002a6e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ab0:	bf00      	nop
 8002ab2:	3754      	adds	r7, #84	@ 0x54
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr

08002aba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f7ff ff21 	bl	800291c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b085      	sub	sp, #20
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b21      	cmp	r3, #33	@ 0x21
 8002af4:	d13e      	bne.n	8002b74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002afe:	d114      	bne.n	8002b2a <UART_Transmit_IT+0x48>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d110      	bne.n	8002b2a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	1c9a      	adds	r2, r3, #2
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	621a      	str	r2, [r3, #32]
 8002b28:	e008      	b.n	8002b3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	1c59      	adds	r1, r3, #1
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6211      	str	r1, [r2, #32]
 8002b34:	781a      	ldrb	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10f      	bne.n	8002b70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	e000      	b.n	8002b76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b74:	2302      	movs	r3, #2
  }
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr

08002b80 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b96:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff fea9 	bl	80028f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08c      	sub	sp, #48	@ 0x30
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b22      	cmp	r3, #34	@ 0x22
 8002bc2:	f040 80ae 	bne.w	8002d22 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bce:	d117      	bne.n	8002c00 <UART_Receive_IT+0x50>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d113      	bne.n	8002c00 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf8:	1c9a      	adds	r2, r3, #2
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	629a      	str	r2, [r3, #40]	@ 0x28
 8002bfe:	e026      	b.n	8002c4e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c12:	d007      	beq.n	8002c24 <UART_Receive_IT+0x74>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10a      	bne.n	8002c32 <UART_Receive_IT+0x82>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d106      	bne.n	8002c32 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c2e:	701a      	strb	r2, [r3, #0]
 8002c30:	e008      	b.n	8002c44 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c42:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d15d      	bne.n	8002d1e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68da      	ldr	r2, [r3, #12]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0220 	bic.w	r2, r2, #32
 8002c70:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695a      	ldr	r2, [r3, #20]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0201 	bic.w	r2, r2, #1
 8002c90:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2220      	movs	r2, #32
 8002c96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d135      	bne.n	8002d14 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	330c      	adds	r3, #12
 8002cb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	e853 3f00 	ldrex	r3, [r3]
 8002cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	f023 0310 	bic.w	r3, r3, #16
 8002cc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	330c      	adds	r3, #12
 8002ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cce:	623a      	str	r2, [r7, #32]
 8002cd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd2:	69f9      	ldr	r1, [r7, #28]
 8002cd4:	6a3a      	ldr	r2, [r7, #32]
 8002cd6:	e841 2300 	strex	r3, r2, [r1]
 8002cda:	61bb      	str	r3, [r7, #24]
   return(result);
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1e5      	bne.n	8002cae <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	2b10      	cmp	r3, #16
 8002cee:	d10a      	bne.n	8002d06 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	60fb      	str	r3, [r7, #12]
 8002d04:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff fe0e 	bl	800292e <HAL_UARTEx_RxEventCallback>
 8002d12:	e002      	b.n	8002d1a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f7ff fdf8 	bl	800290a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	e002      	b.n	8002d24 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	e000      	b.n	8002d24 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002d22:	2302      	movs	r3, #2
  }
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3730      	adds	r7, #48	@ 0x30
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002d66:	f023 030c 	bic.w	r3, r3, #12
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6812      	ldr	r2, [r2, #0]
 8002d6e:	68b9      	ldr	r1, [r7, #8]
 8002d70:	430b      	orrs	r3, r1
 8002d72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a2c      	ldr	r2, [pc, #176]	@ (8002e40 <UART_SetConfig+0x114>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d103      	bne.n	8002d9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d94:	f7fe fd80 	bl	8001898 <HAL_RCC_GetPCLK2Freq>
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	e002      	b.n	8002da2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d9c:	f7fe fd68 	bl	8001870 <HAL_RCC_GetPCLK1Freq>
 8002da0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	009a      	lsls	r2, r3, #2
 8002dac:	441a      	add	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db8:	4a22      	ldr	r2, [pc, #136]	@ (8002e44 <UART_SetConfig+0x118>)
 8002dba:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	0119      	lsls	r1, r3, #4
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	009a      	lsls	r2, r3, #2
 8002dcc:	441a      	add	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e44 <UART_SetConfig+0x118>)
 8002dda:	fba3 0302 	umull	r0, r3, r3, r2
 8002dde:	095b      	lsrs	r3, r3, #5
 8002de0:	2064      	movs	r0, #100	@ 0x64
 8002de2:	fb00 f303 	mul.w	r3, r0, r3
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	3332      	adds	r3, #50	@ 0x32
 8002dec:	4a15      	ldr	r2, [pc, #84]	@ (8002e44 <UART_SetConfig+0x118>)
 8002dee:	fba2 2303 	umull	r2, r3, r2, r3
 8002df2:	095b      	lsrs	r3, r3, #5
 8002df4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002df8:	4419      	add	r1, r3
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	009a      	lsls	r2, r3, #2
 8002e04:	441a      	add	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e10:	4b0c      	ldr	r3, [pc, #48]	@ (8002e44 <UART_SetConfig+0x118>)
 8002e12:	fba3 0302 	umull	r0, r3, r3, r2
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	2064      	movs	r0, #100	@ 0x64
 8002e1a:	fb00 f303 	mul.w	r3, r0, r3
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	3332      	adds	r3, #50	@ 0x32
 8002e24:	4a07      	ldr	r2, [pc, #28]	@ (8002e44 <UART_SetConfig+0x118>)
 8002e26:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2a:	095b      	lsrs	r3, r3, #5
 8002e2c:	f003 020f 	and.w	r2, r3, #15
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	440a      	add	r2, r1
 8002e36:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e38:	bf00      	nop
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40013800 	.word	0x40013800
 8002e44:	51eb851f 	.word	0x51eb851f

08002e48 <sniprintf>:
 8002e48:	b40c      	push	{r2, r3}
 8002e4a:	b530      	push	{r4, r5, lr}
 8002e4c:	4b17      	ldr	r3, [pc, #92]	@ (8002eac <sniprintf+0x64>)
 8002e4e:	1e0c      	subs	r4, r1, #0
 8002e50:	681d      	ldr	r5, [r3, #0]
 8002e52:	b09d      	sub	sp, #116	@ 0x74
 8002e54:	da08      	bge.n	8002e68 <sniprintf+0x20>
 8002e56:	238b      	movs	r3, #139	@ 0x8b
 8002e58:	f04f 30ff 	mov.w	r0, #4294967295
 8002e5c:	602b      	str	r3, [r5, #0]
 8002e5e:	b01d      	add	sp, #116	@ 0x74
 8002e60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002e64:	b002      	add	sp, #8
 8002e66:	4770      	bx	lr
 8002e68:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002e6c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002e70:	bf0c      	ite	eq
 8002e72:	4623      	moveq	r3, r4
 8002e74:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002e78:	9304      	str	r3, [sp, #16]
 8002e7a:	9307      	str	r3, [sp, #28]
 8002e7c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e80:	9002      	str	r0, [sp, #8]
 8002e82:	9006      	str	r0, [sp, #24]
 8002e84:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002e88:	4628      	mov	r0, r5
 8002e8a:	ab21      	add	r3, sp, #132	@ 0x84
 8002e8c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002e8e:	a902      	add	r1, sp, #8
 8002e90:	9301      	str	r3, [sp, #4]
 8002e92:	f000 f993 	bl	80031bc <_svfiprintf_r>
 8002e96:	1c43      	adds	r3, r0, #1
 8002e98:	bfbc      	itt	lt
 8002e9a:	238b      	movlt	r3, #139	@ 0x8b
 8002e9c:	602b      	strlt	r3, [r5, #0]
 8002e9e:	2c00      	cmp	r4, #0
 8002ea0:	d0dd      	beq.n	8002e5e <sniprintf+0x16>
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	9b02      	ldr	r3, [sp, #8]
 8002ea6:	701a      	strb	r2, [r3, #0]
 8002ea8:	e7d9      	b.n	8002e5e <sniprintf+0x16>
 8002eaa:	bf00      	nop
 8002eac:	2000000c 	.word	0x2000000c

08002eb0 <memset>:
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	4402      	add	r2, r0
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d100      	bne.n	8002eba <memset+0xa>
 8002eb8:	4770      	bx	lr
 8002eba:	f803 1b01 	strb.w	r1, [r3], #1
 8002ebe:	e7f9      	b.n	8002eb4 <memset+0x4>

08002ec0 <__errno>:
 8002ec0:	4b01      	ldr	r3, [pc, #4]	@ (8002ec8 <__errno+0x8>)
 8002ec2:	6818      	ldr	r0, [r3, #0]
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	2000000c 	.word	0x2000000c

08002ecc <__libc_init_array>:
 8002ecc:	b570      	push	{r4, r5, r6, lr}
 8002ece:	2600      	movs	r6, #0
 8002ed0:	4d0c      	ldr	r5, [pc, #48]	@ (8002f04 <__libc_init_array+0x38>)
 8002ed2:	4c0d      	ldr	r4, [pc, #52]	@ (8002f08 <__libc_init_array+0x3c>)
 8002ed4:	1b64      	subs	r4, r4, r5
 8002ed6:	10a4      	asrs	r4, r4, #2
 8002ed8:	42a6      	cmp	r6, r4
 8002eda:	d109      	bne.n	8002ef0 <__libc_init_array+0x24>
 8002edc:	f000 fc78 	bl	80037d0 <_init>
 8002ee0:	2600      	movs	r6, #0
 8002ee2:	4d0a      	ldr	r5, [pc, #40]	@ (8002f0c <__libc_init_array+0x40>)
 8002ee4:	4c0a      	ldr	r4, [pc, #40]	@ (8002f10 <__libc_init_array+0x44>)
 8002ee6:	1b64      	subs	r4, r4, r5
 8002ee8:	10a4      	asrs	r4, r4, #2
 8002eea:	42a6      	cmp	r6, r4
 8002eec:	d105      	bne.n	8002efa <__libc_init_array+0x2e>
 8002eee:	bd70      	pop	{r4, r5, r6, pc}
 8002ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ef4:	4798      	blx	r3
 8002ef6:	3601      	adds	r6, #1
 8002ef8:	e7ee      	b.n	8002ed8 <__libc_init_array+0xc>
 8002efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002efe:	4798      	blx	r3
 8002f00:	3601      	adds	r6, #1
 8002f02:	e7f2      	b.n	8002eea <__libc_init_array+0x1e>
 8002f04:	08003890 	.word	0x08003890
 8002f08:	08003890 	.word	0x08003890
 8002f0c:	08003890 	.word	0x08003890
 8002f10:	08003894 	.word	0x08003894

08002f14 <__retarget_lock_acquire_recursive>:
 8002f14:	4770      	bx	lr

08002f16 <__retarget_lock_release_recursive>:
 8002f16:	4770      	bx	lr

08002f18 <_free_r>:
 8002f18:	b538      	push	{r3, r4, r5, lr}
 8002f1a:	4605      	mov	r5, r0
 8002f1c:	2900      	cmp	r1, #0
 8002f1e:	d040      	beq.n	8002fa2 <_free_r+0x8a>
 8002f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f24:	1f0c      	subs	r4, r1, #4
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	bfb8      	it	lt
 8002f2a:	18e4      	addlt	r4, r4, r3
 8002f2c:	f000 f8de 	bl	80030ec <__malloc_lock>
 8002f30:	4a1c      	ldr	r2, [pc, #112]	@ (8002fa4 <_free_r+0x8c>)
 8002f32:	6813      	ldr	r3, [r2, #0]
 8002f34:	b933      	cbnz	r3, 8002f44 <_free_r+0x2c>
 8002f36:	6063      	str	r3, [r4, #4]
 8002f38:	6014      	str	r4, [r2, #0]
 8002f3a:	4628      	mov	r0, r5
 8002f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f40:	f000 b8da 	b.w	80030f8 <__malloc_unlock>
 8002f44:	42a3      	cmp	r3, r4
 8002f46:	d908      	bls.n	8002f5a <_free_r+0x42>
 8002f48:	6820      	ldr	r0, [r4, #0]
 8002f4a:	1821      	adds	r1, r4, r0
 8002f4c:	428b      	cmp	r3, r1
 8002f4e:	bf01      	itttt	eq
 8002f50:	6819      	ldreq	r1, [r3, #0]
 8002f52:	685b      	ldreq	r3, [r3, #4]
 8002f54:	1809      	addeq	r1, r1, r0
 8002f56:	6021      	streq	r1, [r4, #0]
 8002f58:	e7ed      	b.n	8002f36 <_free_r+0x1e>
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	b10b      	cbz	r3, 8002f64 <_free_r+0x4c>
 8002f60:	42a3      	cmp	r3, r4
 8002f62:	d9fa      	bls.n	8002f5a <_free_r+0x42>
 8002f64:	6811      	ldr	r1, [r2, #0]
 8002f66:	1850      	adds	r0, r2, r1
 8002f68:	42a0      	cmp	r0, r4
 8002f6a:	d10b      	bne.n	8002f84 <_free_r+0x6c>
 8002f6c:	6820      	ldr	r0, [r4, #0]
 8002f6e:	4401      	add	r1, r0
 8002f70:	1850      	adds	r0, r2, r1
 8002f72:	4283      	cmp	r3, r0
 8002f74:	6011      	str	r1, [r2, #0]
 8002f76:	d1e0      	bne.n	8002f3a <_free_r+0x22>
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	4408      	add	r0, r1
 8002f7e:	6010      	str	r0, [r2, #0]
 8002f80:	6053      	str	r3, [r2, #4]
 8002f82:	e7da      	b.n	8002f3a <_free_r+0x22>
 8002f84:	d902      	bls.n	8002f8c <_free_r+0x74>
 8002f86:	230c      	movs	r3, #12
 8002f88:	602b      	str	r3, [r5, #0]
 8002f8a:	e7d6      	b.n	8002f3a <_free_r+0x22>
 8002f8c:	6820      	ldr	r0, [r4, #0]
 8002f8e:	1821      	adds	r1, r4, r0
 8002f90:	428b      	cmp	r3, r1
 8002f92:	bf01      	itttt	eq
 8002f94:	6819      	ldreq	r1, [r3, #0]
 8002f96:	685b      	ldreq	r3, [r3, #4]
 8002f98:	1809      	addeq	r1, r1, r0
 8002f9a:	6021      	streq	r1, [r4, #0]
 8002f9c:	6063      	str	r3, [r4, #4]
 8002f9e:	6054      	str	r4, [r2, #4]
 8002fa0:	e7cb      	b.n	8002f3a <_free_r+0x22>
 8002fa2:	bd38      	pop	{r3, r4, r5, pc}
 8002fa4:	20000288 	.word	0x20000288

08002fa8 <sbrk_aligned>:
 8002fa8:	b570      	push	{r4, r5, r6, lr}
 8002faa:	4e0f      	ldr	r6, [pc, #60]	@ (8002fe8 <sbrk_aligned+0x40>)
 8002fac:	460c      	mov	r4, r1
 8002fae:	6831      	ldr	r1, [r6, #0]
 8002fb0:	4605      	mov	r5, r0
 8002fb2:	b911      	cbnz	r1, 8002fba <sbrk_aligned+0x12>
 8002fb4:	f000 fbaa 	bl	800370c <_sbrk_r>
 8002fb8:	6030      	str	r0, [r6, #0]
 8002fba:	4621      	mov	r1, r4
 8002fbc:	4628      	mov	r0, r5
 8002fbe:	f000 fba5 	bl	800370c <_sbrk_r>
 8002fc2:	1c43      	adds	r3, r0, #1
 8002fc4:	d103      	bne.n	8002fce <sbrk_aligned+0x26>
 8002fc6:	f04f 34ff 	mov.w	r4, #4294967295
 8002fca:	4620      	mov	r0, r4
 8002fcc:	bd70      	pop	{r4, r5, r6, pc}
 8002fce:	1cc4      	adds	r4, r0, #3
 8002fd0:	f024 0403 	bic.w	r4, r4, #3
 8002fd4:	42a0      	cmp	r0, r4
 8002fd6:	d0f8      	beq.n	8002fca <sbrk_aligned+0x22>
 8002fd8:	1a21      	subs	r1, r4, r0
 8002fda:	4628      	mov	r0, r5
 8002fdc:	f000 fb96 	bl	800370c <_sbrk_r>
 8002fe0:	3001      	adds	r0, #1
 8002fe2:	d1f2      	bne.n	8002fca <sbrk_aligned+0x22>
 8002fe4:	e7ef      	b.n	8002fc6 <sbrk_aligned+0x1e>
 8002fe6:	bf00      	nop
 8002fe8:	20000284 	.word	0x20000284

08002fec <_malloc_r>:
 8002fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ff0:	1ccd      	adds	r5, r1, #3
 8002ff2:	f025 0503 	bic.w	r5, r5, #3
 8002ff6:	3508      	adds	r5, #8
 8002ff8:	2d0c      	cmp	r5, #12
 8002ffa:	bf38      	it	cc
 8002ffc:	250c      	movcc	r5, #12
 8002ffe:	2d00      	cmp	r5, #0
 8003000:	4606      	mov	r6, r0
 8003002:	db01      	blt.n	8003008 <_malloc_r+0x1c>
 8003004:	42a9      	cmp	r1, r5
 8003006:	d904      	bls.n	8003012 <_malloc_r+0x26>
 8003008:	230c      	movs	r3, #12
 800300a:	6033      	str	r3, [r6, #0]
 800300c:	2000      	movs	r0, #0
 800300e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003012:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80030e8 <_malloc_r+0xfc>
 8003016:	f000 f869 	bl	80030ec <__malloc_lock>
 800301a:	f8d8 3000 	ldr.w	r3, [r8]
 800301e:	461c      	mov	r4, r3
 8003020:	bb44      	cbnz	r4, 8003074 <_malloc_r+0x88>
 8003022:	4629      	mov	r1, r5
 8003024:	4630      	mov	r0, r6
 8003026:	f7ff ffbf 	bl	8002fa8 <sbrk_aligned>
 800302a:	1c43      	adds	r3, r0, #1
 800302c:	4604      	mov	r4, r0
 800302e:	d158      	bne.n	80030e2 <_malloc_r+0xf6>
 8003030:	f8d8 4000 	ldr.w	r4, [r8]
 8003034:	4627      	mov	r7, r4
 8003036:	2f00      	cmp	r7, #0
 8003038:	d143      	bne.n	80030c2 <_malloc_r+0xd6>
 800303a:	2c00      	cmp	r4, #0
 800303c:	d04b      	beq.n	80030d6 <_malloc_r+0xea>
 800303e:	6823      	ldr	r3, [r4, #0]
 8003040:	4639      	mov	r1, r7
 8003042:	4630      	mov	r0, r6
 8003044:	eb04 0903 	add.w	r9, r4, r3
 8003048:	f000 fb60 	bl	800370c <_sbrk_r>
 800304c:	4581      	cmp	r9, r0
 800304e:	d142      	bne.n	80030d6 <_malloc_r+0xea>
 8003050:	6821      	ldr	r1, [r4, #0]
 8003052:	4630      	mov	r0, r6
 8003054:	1a6d      	subs	r5, r5, r1
 8003056:	4629      	mov	r1, r5
 8003058:	f7ff ffa6 	bl	8002fa8 <sbrk_aligned>
 800305c:	3001      	adds	r0, #1
 800305e:	d03a      	beq.n	80030d6 <_malloc_r+0xea>
 8003060:	6823      	ldr	r3, [r4, #0]
 8003062:	442b      	add	r3, r5
 8003064:	6023      	str	r3, [r4, #0]
 8003066:	f8d8 3000 	ldr.w	r3, [r8]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	bb62      	cbnz	r2, 80030c8 <_malloc_r+0xdc>
 800306e:	f8c8 7000 	str.w	r7, [r8]
 8003072:	e00f      	b.n	8003094 <_malloc_r+0xa8>
 8003074:	6822      	ldr	r2, [r4, #0]
 8003076:	1b52      	subs	r2, r2, r5
 8003078:	d420      	bmi.n	80030bc <_malloc_r+0xd0>
 800307a:	2a0b      	cmp	r2, #11
 800307c:	d917      	bls.n	80030ae <_malloc_r+0xc2>
 800307e:	1961      	adds	r1, r4, r5
 8003080:	42a3      	cmp	r3, r4
 8003082:	6025      	str	r5, [r4, #0]
 8003084:	bf18      	it	ne
 8003086:	6059      	strne	r1, [r3, #4]
 8003088:	6863      	ldr	r3, [r4, #4]
 800308a:	bf08      	it	eq
 800308c:	f8c8 1000 	streq.w	r1, [r8]
 8003090:	5162      	str	r2, [r4, r5]
 8003092:	604b      	str	r3, [r1, #4]
 8003094:	4630      	mov	r0, r6
 8003096:	f000 f82f 	bl	80030f8 <__malloc_unlock>
 800309a:	f104 000b 	add.w	r0, r4, #11
 800309e:	1d23      	adds	r3, r4, #4
 80030a0:	f020 0007 	bic.w	r0, r0, #7
 80030a4:	1ac2      	subs	r2, r0, r3
 80030a6:	bf1c      	itt	ne
 80030a8:	1a1b      	subne	r3, r3, r0
 80030aa:	50a3      	strne	r3, [r4, r2]
 80030ac:	e7af      	b.n	800300e <_malloc_r+0x22>
 80030ae:	6862      	ldr	r2, [r4, #4]
 80030b0:	42a3      	cmp	r3, r4
 80030b2:	bf0c      	ite	eq
 80030b4:	f8c8 2000 	streq.w	r2, [r8]
 80030b8:	605a      	strne	r2, [r3, #4]
 80030ba:	e7eb      	b.n	8003094 <_malloc_r+0xa8>
 80030bc:	4623      	mov	r3, r4
 80030be:	6864      	ldr	r4, [r4, #4]
 80030c0:	e7ae      	b.n	8003020 <_malloc_r+0x34>
 80030c2:	463c      	mov	r4, r7
 80030c4:	687f      	ldr	r7, [r7, #4]
 80030c6:	e7b6      	b.n	8003036 <_malloc_r+0x4a>
 80030c8:	461a      	mov	r2, r3
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	42a3      	cmp	r3, r4
 80030ce:	d1fb      	bne.n	80030c8 <_malloc_r+0xdc>
 80030d0:	2300      	movs	r3, #0
 80030d2:	6053      	str	r3, [r2, #4]
 80030d4:	e7de      	b.n	8003094 <_malloc_r+0xa8>
 80030d6:	230c      	movs	r3, #12
 80030d8:	4630      	mov	r0, r6
 80030da:	6033      	str	r3, [r6, #0]
 80030dc:	f000 f80c 	bl	80030f8 <__malloc_unlock>
 80030e0:	e794      	b.n	800300c <_malloc_r+0x20>
 80030e2:	6005      	str	r5, [r0, #0]
 80030e4:	e7d6      	b.n	8003094 <_malloc_r+0xa8>
 80030e6:	bf00      	nop
 80030e8:	20000288 	.word	0x20000288

080030ec <__malloc_lock>:
 80030ec:	4801      	ldr	r0, [pc, #4]	@ (80030f4 <__malloc_lock+0x8>)
 80030ee:	f7ff bf11 	b.w	8002f14 <__retarget_lock_acquire_recursive>
 80030f2:	bf00      	nop
 80030f4:	20000280 	.word	0x20000280

080030f8 <__malloc_unlock>:
 80030f8:	4801      	ldr	r0, [pc, #4]	@ (8003100 <__malloc_unlock+0x8>)
 80030fa:	f7ff bf0c 	b.w	8002f16 <__retarget_lock_release_recursive>
 80030fe:	bf00      	nop
 8003100:	20000280 	.word	0x20000280

08003104 <__ssputs_r>:
 8003104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003108:	461f      	mov	r7, r3
 800310a:	688e      	ldr	r6, [r1, #8]
 800310c:	4682      	mov	sl, r0
 800310e:	42be      	cmp	r6, r7
 8003110:	460c      	mov	r4, r1
 8003112:	4690      	mov	r8, r2
 8003114:	680b      	ldr	r3, [r1, #0]
 8003116:	d82d      	bhi.n	8003174 <__ssputs_r+0x70>
 8003118:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800311c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003120:	d026      	beq.n	8003170 <__ssputs_r+0x6c>
 8003122:	6965      	ldr	r5, [r4, #20]
 8003124:	6909      	ldr	r1, [r1, #16]
 8003126:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800312a:	eba3 0901 	sub.w	r9, r3, r1
 800312e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003132:	1c7b      	adds	r3, r7, #1
 8003134:	444b      	add	r3, r9
 8003136:	106d      	asrs	r5, r5, #1
 8003138:	429d      	cmp	r5, r3
 800313a:	bf38      	it	cc
 800313c:	461d      	movcc	r5, r3
 800313e:	0553      	lsls	r3, r2, #21
 8003140:	d527      	bpl.n	8003192 <__ssputs_r+0x8e>
 8003142:	4629      	mov	r1, r5
 8003144:	f7ff ff52 	bl	8002fec <_malloc_r>
 8003148:	4606      	mov	r6, r0
 800314a:	b360      	cbz	r0, 80031a6 <__ssputs_r+0xa2>
 800314c:	464a      	mov	r2, r9
 800314e:	6921      	ldr	r1, [r4, #16]
 8003150:	f000 fafa 	bl	8003748 <memcpy>
 8003154:	89a3      	ldrh	r3, [r4, #12]
 8003156:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800315a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800315e:	81a3      	strh	r3, [r4, #12]
 8003160:	6126      	str	r6, [r4, #16]
 8003162:	444e      	add	r6, r9
 8003164:	6026      	str	r6, [r4, #0]
 8003166:	463e      	mov	r6, r7
 8003168:	6165      	str	r5, [r4, #20]
 800316a:	eba5 0509 	sub.w	r5, r5, r9
 800316e:	60a5      	str	r5, [r4, #8]
 8003170:	42be      	cmp	r6, r7
 8003172:	d900      	bls.n	8003176 <__ssputs_r+0x72>
 8003174:	463e      	mov	r6, r7
 8003176:	4632      	mov	r2, r6
 8003178:	4641      	mov	r1, r8
 800317a:	6820      	ldr	r0, [r4, #0]
 800317c:	f000 faac 	bl	80036d8 <memmove>
 8003180:	2000      	movs	r0, #0
 8003182:	68a3      	ldr	r3, [r4, #8]
 8003184:	1b9b      	subs	r3, r3, r6
 8003186:	60a3      	str	r3, [r4, #8]
 8003188:	6823      	ldr	r3, [r4, #0]
 800318a:	4433      	add	r3, r6
 800318c:	6023      	str	r3, [r4, #0]
 800318e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003192:	462a      	mov	r2, r5
 8003194:	f000 fae6 	bl	8003764 <_realloc_r>
 8003198:	4606      	mov	r6, r0
 800319a:	2800      	cmp	r0, #0
 800319c:	d1e0      	bne.n	8003160 <__ssputs_r+0x5c>
 800319e:	4650      	mov	r0, sl
 80031a0:	6921      	ldr	r1, [r4, #16]
 80031a2:	f7ff feb9 	bl	8002f18 <_free_r>
 80031a6:	230c      	movs	r3, #12
 80031a8:	f8ca 3000 	str.w	r3, [sl]
 80031ac:	89a3      	ldrh	r3, [r4, #12]
 80031ae:	f04f 30ff 	mov.w	r0, #4294967295
 80031b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031b6:	81a3      	strh	r3, [r4, #12]
 80031b8:	e7e9      	b.n	800318e <__ssputs_r+0x8a>
	...

080031bc <_svfiprintf_r>:
 80031bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031c0:	4698      	mov	r8, r3
 80031c2:	898b      	ldrh	r3, [r1, #12]
 80031c4:	4607      	mov	r7, r0
 80031c6:	061b      	lsls	r3, r3, #24
 80031c8:	460d      	mov	r5, r1
 80031ca:	4614      	mov	r4, r2
 80031cc:	b09d      	sub	sp, #116	@ 0x74
 80031ce:	d510      	bpl.n	80031f2 <_svfiprintf_r+0x36>
 80031d0:	690b      	ldr	r3, [r1, #16]
 80031d2:	b973      	cbnz	r3, 80031f2 <_svfiprintf_r+0x36>
 80031d4:	2140      	movs	r1, #64	@ 0x40
 80031d6:	f7ff ff09 	bl	8002fec <_malloc_r>
 80031da:	6028      	str	r0, [r5, #0]
 80031dc:	6128      	str	r0, [r5, #16]
 80031de:	b930      	cbnz	r0, 80031ee <_svfiprintf_r+0x32>
 80031e0:	230c      	movs	r3, #12
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	f04f 30ff 	mov.w	r0, #4294967295
 80031e8:	b01d      	add	sp, #116	@ 0x74
 80031ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031ee:	2340      	movs	r3, #64	@ 0x40
 80031f0:	616b      	str	r3, [r5, #20]
 80031f2:	2300      	movs	r3, #0
 80031f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80031f6:	2320      	movs	r3, #32
 80031f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80031fc:	2330      	movs	r3, #48	@ 0x30
 80031fe:	f04f 0901 	mov.w	r9, #1
 8003202:	f8cd 800c 	str.w	r8, [sp, #12]
 8003206:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80033a0 <_svfiprintf_r+0x1e4>
 800320a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800320e:	4623      	mov	r3, r4
 8003210:	469a      	mov	sl, r3
 8003212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003216:	b10a      	cbz	r2, 800321c <_svfiprintf_r+0x60>
 8003218:	2a25      	cmp	r2, #37	@ 0x25
 800321a:	d1f9      	bne.n	8003210 <_svfiprintf_r+0x54>
 800321c:	ebba 0b04 	subs.w	fp, sl, r4
 8003220:	d00b      	beq.n	800323a <_svfiprintf_r+0x7e>
 8003222:	465b      	mov	r3, fp
 8003224:	4622      	mov	r2, r4
 8003226:	4629      	mov	r1, r5
 8003228:	4638      	mov	r0, r7
 800322a:	f7ff ff6b 	bl	8003104 <__ssputs_r>
 800322e:	3001      	adds	r0, #1
 8003230:	f000 80a7 	beq.w	8003382 <_svfiprintf_r+0x1c6>
 8003234:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003236:	445a      	add	r2, fp
 8003238:	9209      	str	r2, [sp, #36]	@ 0x24
 800323a:	f89a 3000 	ldrb.w	r3, [sl]
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 809f 	beq.w	8003382 <_svfiprintf_r+0x1c6>
 8003244:	2300      	movs	r3, #0
 8003246:	f04f 32ff 	mov.w	r2, #4294967295
 800324a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800324e:	f10a 0a01 	add.w	sl, sl, #1
 8003252:	9304      	str	r3, [sp, #16]
 8003254:	9307      	str	r3, [sp, #28]
 8003256:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800325a:	931a      	str	r3, [sp, #104]	@ 0x68
 800325c:	4654      	mov	r4, sl
 800325e:	2205      	movs	r2, #5
 8003260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003264:	484e      	ldr	r0, [pc, #312]	@ (80033a0 <_svfiprintf_r+0x1e4>)
 8003266:	f000 fa61 	bl	800372c <memchr>
 800326a:	9a04      	ldr	r2, [sp, #16]
 800326c:	b9d8      	cbnz	r0, 80032a6 <_svfiprintf_r+0xea>
 800326e:	06d0      	lsls	r0, r2, #27
 8003270:	bf44      	itt	mi
 8003272:	2320      	movmi	r3, #32
 8003274:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003278:	0711      	lsls	r1, r2, #28
 800327a:	bf44      	itt	mi
 800327c:	232b      	movmi	r3, #43	@ 0x2b
 800327e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003282:	f89a 3000 	ldrb.w	r3, [sl]
 8003286:	2b2a      	cmp	r3, #42	@ 0x2a
 8003288:	d015      	beq.n	80032b6 <_svfiprintf_r+0xfa>
 800328a:	4654      	mov	r4, sl
 800328c:	2000      	movs	r0, #0
 800328e:	f04f 0c0a 	mov.w	ip, #10
 8003292:	9a07      	ldr	r2, [sp, #28]
 8003294:	4621      	mov	r1, r4
 8003296:	f811 3b01 	ldrb.w	r3, [r1], #1
 800329a:	3b30      	subs	r3, #48	@ 0x30
 800329c:	2b09      	cmp	r3, #9
 800329e:	d94b      	bls.n	8003338 <_svfiprintf_r+0x17c>
 80032a0:	b1b0      	cbz	r0, 80032d0 <_svfiprintf_r+0x114>
 80032a2:	9207      	str	r2, [sp, #28]
 80032a4:	e014      	b.n	80032d0 <_svfiprintf_r+0x114>
 80032a6:	eba0 0308 	sub.w	r3, r0, r8
 80032aa:	fa09 f303 	lsl.w	r3, r9, r3
 80032ae:	4313      	orrs	r3, r2
 80032b0:	46a2      	mov	sl, r4
 80032b2:	9304      	str	r3, [sp, #16]
 80032b4:	e7d2      	b.n	800325c <_svfiprintf_r+0xa0>
 80032b6:	9b03      	ldr	r3, [sp, #12]
 80032b8:	1d19      	adds	r1, r3, #4
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	9103      	str	r1, [sp, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	bfbb      	ittet	lt
 80032c2:	425b      	neglt	r3, r3
 80032c4:	f042 0202 	orrlt.w	r2, r2, #2
 80032c8:	9307      	strge	r3, [sp, #28]
 80032ca:	9307      	strlt	r3, [sp, #28]
 80032cc:	bfb8      	it	lt
 80032ce:	9204      	strlt	r2, [sp, #16]
 80032d0:	7823      	ldrb	r3, [r4, #0]
 80032d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80032d4:	d10a      	bne.n	80032ec <_svfiprintf_r+0x130>
 80032d6:	7863      	ldrb	r3, [r4, #1]
 80032d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80032da:	d132      	bne.n	8003342 <_svfiprintf_r+0x186>
 80032dc:	9b03      	ldr	r3, [sp, #12]
 80032de:	3402      	adds	r4, #2
 80032e0:	1d1a      	adds	r2, r3, #4
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	9203      	str	r2, [sp, #12]
 80032e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80032ea:	9305      	str	r3, [sp, #20]
 80032ec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80033a4 <_svfiprintf_r+0x1e8>
 80032f0:	2203      	movs	r2, #3
 80032f2:	4650      	mov	r0, sl
 80032f4:	7821      	ldrb	r1, [r4, #0]
 80032f6:	f000 fa19 	bl	800372c <memchr>
 80032fa:	b138      	cbz	r0, 800330c <_svfiprintf_r+0x150>
 80032fc:	2240      	movs	r2, #64	@ 0x40
 80032fe:	9b04      	ldr	r3, [sp, #16]
 8003300:	eba0 000a 	sub.w	r0, r0, sl
 8003304:	4082      	lsls	r2, r0
 8003306:	4313      	orrs	r3, r2
 8003308:	3401      	adds	r4, #1
 800330a:	9304      	str	r3, [sp, #16]
 800330c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003310:	2206      	movs	r2, #6
 8003312:	4825      	ldr	r0, [pc, #148]	@ (80033a8 <_svfiprintf_r+0x1ec>)
 8003314:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003318:	f000 fa08 	bl	800372c <memchr>
 800331c:	2800      	cmp	r0, #0
 800331e:	d036      	beq.n	800338e <_svfiprintf_r+0x1d2>
 8003320:	4b22      	ldr	r3, [pc, #136]	@ (80033ac <_svfiprintf_r+0x1f0>)
 8003322:	bb1b      	cbnz	r3, 800336c <_svfiprintf_r+0x1b0>
 8003324:	9b03      	ldr	r3, [sp, #12]
 8003326:	3307      	adds	r3, #7
 8003328:	f023 0307 	bic.w	r3, r3, #7
 800332c:	3308      	adds	r3, #8
 800332e:	9303      	str	r3, [sp, #12]
 8003330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003332:	4433      	add	r3, r6
 8003334:	9309      	str	r3, [sp, #36]	@ 0x24
 8003336:	e76a      	b.n	800320e <_svfiprintf_r+0x52>
 8003338:	460c      	mov	r4, r1
 800333a:	2001      	movs	r0, #1
 800333c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003340:	e7a8      	b.n	8003294 <_svfiprintf_r+0xd8>
 8003342:	2300      	movs	r3, #0
 8003344:	f04f 0c0a 	mov.w	ip, #10
 8003348:	4619      	mov	r1, r3
 800334a:	3401      	adds	r4, #1
 800334c:	9305      	str	r3, [sp, #20]
 800334e:	4620      	mov	r0, r4
 8003350:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003354:	3a30      	subs	r2, #48	@ 0x30
 8003356:	2a09      	cmp	r2, #9
 8003358:	d903      	bls.n	8003362 <_svfiprintf_r+0x1a6>
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0c6      	beq.n	80032ec <_svfiprintf_r+0x130>
 800335e:	9105      	str	r1, [sp, #20]
 8003360:	e7c4      	b.n	80032ec <_svfiprintf_r+0x130>
 8003362:	4604      	mov	r4, r0
 8003364:	2301      	movs	r3, #1
 8003366:	fb0c 2101 	mla	r1, ip, r1, r2
 800336a:	e7f0      	b.n	800334e <_svfiprintf_r+0x192>
 800336c:	ab03      	add	r3, sp, #12
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	462a      	mov	r2, r5
 8003372:	4638      	mov	r0, r7
 8003374:	4b0e      	ldr	r3, [pc, #56]	@ (80033b0 <_svfiprintf_r+0x1f4>)
 8003376:	a904      	add	r1, sp, #16
 8003378:	f3af 8000 	nop.w
 800337c:	1c42      	adds	r2, r0, #1
 800337e:	4606      	mov	r6, r0
 8003380:	d1d6      	bne.n	8003330 <_svfiprintf_r+0x174>
 8003382:	89ab      	ldrh	r3, [r5, #12]
 8003384:	065b      	lsls	r3, r3, #25
 8003386:	f53f af2d 	bmi.w	80031e4 <_svfiprintf_r+0x28>
 800338a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800338c:	e72c      	b.n	80031e8 <_svfiprintf_r+0x2c>
 800338e:	ab03      	add	r3, sp, #12
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	462a      	mov	r2, r5
 8003394:	4638      	mov	r0, r7
 8003396:	4b06      	ldr	r3, [pc, #24]	@ (80033b0 <_svfiprintf_r+0x1f4>)
 8003398:	a904      	add	r1, sp, #16
 800339a:	f000 f87d 	bl	8003498 <_printf_i>
 800339e:	e7ed      	b.n	800337c <_svfiprintf_r+0x1c0>
 80033a0:	08003852 	.word	0x08003852
 80033a4:	08003858 	.word	0x08003858
 80033a8:	0800385c 	.word	0x0800385c
 80033ac:	00000000 	.word	0x00000000
 80033b0:	08003105 	.word	0x08003105

080033b4 <_printf_common>:
 80033b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033b8:	4616      	mov	r6, r2
 80033ba:	4698      	mov	r8, r3
 80033bc:	688a      	ldr	r2, [r1, #8]
 80033be:	690b      	ldr	r3, [r1, #16]
 80033c0:	4607      	mov	r7, r0
 80033c2:	4293      	cmp	r3, r2
 80033c4:	bfb8      	it	lt
 80033c6:	4613      	movlt	r3, r2
 80033c8:	6033      	str	r3, [r6, #0]
 80033ca:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80033ce:	460c      	mov	r4, r1
 80033d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80033d4:	b10a      	cbz	r2, 80033da <_printf_common+0x26>
 80033d6:	3301      	adds	r3, #1
 80033d8:	6033      	str	r3, [r6, #0]
 80033da:	6823      	ldr	r3, [r4, #0]
 80033dc:	0699      	lsls	r1, r3, #26
 80033de:	bf42      	ittt	mi
 80033e0:	6833      	ldrmi	r3, [r6, #0]
 80033e2:	3302      	addmi	r3, #2
 80033e4:	6033      	strmi	r3, [r6, #0]
 80033e6:	6825      	ldr	r5, [r4, #0]
 80033e8:	f015 0506 	ands.w	r5, r5, #6
 80033ec:	d106      	bne.n	80033fc <_printf_common+0x48>
 80033ee:	f104 0a19 	add.w	sl, r4, #25
 80033f2:	68e3      	ldr	r3, [r4, #12]
 80033f4:	6832      	ldr	r2, [r6, #0]
 80033f6:	1a9b      	subs	r3, r3, r2
 80033f8:	42ab      	cmp	r3, r5
 80033fa:	dc2b      	bgt.n	8003454 <_printf_common+0xa0>
 80033fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003400:	6822      	ldr	r2, [r4, #0]
 8003402:	3b00      	subs	r3, #0
 8003404:	bf18      	it	ne
 8003406:	2301      	movne	r3, #1
 8003408:	0692      	lsls	r2, r2, #26
 800340a:	d430      	bmi.n	800346e <_printf_common+0xba>
 800340c:	4641      	mov	r1, r8
 800340e:	4638      	mov	r0, r7
 8003410:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003414:	47c8      	blx	r9
 8003416:	3001      	adds	r0, #1
 8003418:	d023      	beq.n	8003462 <_printf_common+0xae>
 800341a:	6823      	ldr	r3, [r4, #0]
 800341c:	6922      	ldr	r2, [r4, #16]
 800341e:	f003 0306 	and.w	r3, r3, #6
 8003422:	2b04      	cmp	r3, #4
 8003424:	bf14      	ite	ne
 8003426:	2500      	movne	r5, #0
 8003428:	6833      	ldreq	r3, [r6, #0]
 800342a:	f04f 0600 	mov.w	r6, #0
 800342e:	bf08      	it	eq
 8003430:	68e5      	ldreq	r5, [r4, #12]
 8003432:	f104 041a 	add.w	r4, r4, #26
 8003436:	bf08      	it	eq
 8003438:	1aed      	subeq	r5, r5, r3
 800343a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800343e:	bf08      	it	eq
 8003440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003444:	4293      	cmp	r3, r2
 8003446:	bfc4      	itt	gt
 8003448:	1a9b      	subgt	r3, r3, r2
 800344a:	18ed      	addgt	r5, r5, r3
 800344c:	42b5      	cmp	r5, r6
 800344e:	d11a      	bne.n	8003486 <_printf_common+0xd2>
 8003450:	2000      	movs	r0, #0
 8003452:	e008      	b.n	8003466 <_printf_common+0xb2>
 8003454:	2301      	movs	r3, #1
 8003456:	4652      	mov	r2, sl
 8003458:	4641      	mov	r1, r8
 800345a:	4638      	mov	r0, r7
 800345c:	47c8      	blx	r9
 800345e:	3001      	adds	r0, #1
 8003460:	d103      	bne.n	800346a <_printf_common+0xb6>
 8003462:	f04f 30ff 	mov.w	r0, #4294967295
 8003466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800346a:	3501      	adds	r5, #1
 800346c:	e7c1      	b.n	80033f2 <_printf_common+0x3e>
 800346e:	2030      	movs	r0, #48	@ 0x30
 8003470:	18e1      	adds	r1, r4, r3
 8003472:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800347c:	4422      	add	r2, r4
 800347e:	3302      	adds	r3, #2
 8003480:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003484:	e7c2      	b.n	800340c <_printf_common+0x58>
 8003486:	2301      	movs	r3, #1
 8003488:	4622      	mov	r2, r4
 800348a:	4641      	mov	r1, r8
 800348c:	4638      	mov	r0, r7
 800348e:	47c8      	blx	r9
 8003490:	3001      	adds	r0, #1
 8003492:	d0e6      	beq.n	8003462 <_printf_common+0xae>
 8003494:	3601      	adds	r6, #1
 8003496:	e7d9      	b.n	800344c <_printf_common+0x98>

08003498 <_printf_i>:
 8003498:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800349c:	7e0f      	ldrb	r7, [r1, #24]
 800349e:	4691      	mov	r9, r2
 80034a0:	2f78      	cmp	r7, #120	@ 0x78
 80034a2:	4680      	mov	r8, r0
 80034a4:	460c      	mov	r4, r1
 80034a6:	469a      	mov	sl, r3
 80034a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80034aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80034ae:	d807      	bhi.n	80034c0 <_printf_i+0x28>
 80034b0:	2f62      	cmp	r7, #98	@ 0x62
 80034b2:	d80a      	bhi.n	80034ca <_printf_i+0x32>
 80034b4:	2f00      	cmp	r7, #0
 80034b6:	f000 80d3 	beq.w	8003660 <_printf_i+0x1c8>
 80034ba:	2f58      	cmp	r7, #88	@ 0x58
 80034bc:	f000 80ba 	beq.w	8003634 <_printf_i+0x19c>
 80034c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80034c8:	e03a      	b.n	8003540 <_printf_i+0xa8>
 80034ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80034ce:	2b15      	cmp	r3, #21
 80034d0:	d8f6      	bhi.n	80034c0 <_printf_i+0x28>
 80034d2:	a101      	add	r1, pc, #4	@ (adr r1, 80034d8 <_printf_i+0x40>)
 80034d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034d8:	08003531 	.word	0x08003531
 80034dc:	08003545 	.word	0x08003545
 80034e0:	080034c1 	.word	0x080034c1
 80034e4:	080034c1 	.word	0x080034c1
 80034e8:	080034c1 	.word	0x080034c1
 80034ec:	080034c1 	.word	0x080034c1
 80034f0:	08003545 	.word	0x08003545
 80034f4:	080034c1 	.word	0x080034c1
 80034f8:	080034c1 	.word	0x080034c1
 80034fc:	080034c1 	.word	0x080034c1
 8003500:	080034c1 	.word	0x080034c1
 8003504:	08003647 	.word	0x08003647
 8003508:	0800356f 	.word	0x0800356f
 800350c:	08003601 	.word	0x08003601
 8003510:	080034c1 	.word	0x080034c1
 8003514:	080034c1 	.word	0x080034c1
 8003518:	08003669 	.word	0x08003669
 800351c:	080034c1 	.word	0x080034c1
 8003520:	0800356f 	.word	0x0800356f
 8003524:	080034c1 	.word	0x080034c1
 8003528:	080034c1 	.word	0x080034c1
 800352c:	08003609 	.word	0x08003609
 8003530:	6833      	ldr	r3, [r6, #0]
 8003532:	1d1a      	adds	r2, r3, #4
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6032      	str	r2, [r6, #0]
 8003538:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800353c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003540:	2301      	movs	r3, #1
 8003542:	e09e      	b.n	8003682 <_printf_i+0x1ea>
 8003544:	6833      	ldr	r3, [r6, #0]
 8003546:	6820      	ldr	r0, [r4, #0]
 8003548:	1d19      	adds	r1, r3, #4
 800354a:	6031      	str	r1, [r6, #0]
 800354c:	0606      	lsls	r6, r0, #24
 800354e:	d501      	bpl.n	8003554 <_printf_i+0xbc>
 8003550:	681d      	ldr	r5, [r3, #0]
 8003552:	e003      	b.n	800355c <_printf_i+0xc4>
 8003554:	0645      	lsls	r5, r0, #25
 8003556:	d5fb      	bpl.n	8003550 <_printf_i+0xb8>
 8003558:	f9b3 5000 	ldrsh.w	r5, [r3]
 800355c:	2d00      	cmp	r5, #0
 800355e:	da03      	bge.n	8003568 <_printf_i+0xd0>
 8003560:	232d      	movs	r3, #45	@ 0x2d
 8003562:	426d      	negs	r5, r5
 8003564:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003568:	230a      	movs	r3, #10
 800356a:	4859      	ldr	r0, [pc, #356]	@ (80036d0 <_printf_i+0x238>)
 800356c:	e011      	b.n	8003592 <_printf_i+0xfa>
 800356e:	6821      	ldr	r1, [r4, #0]
 8003570:	6833      	ldr	r3, [r6, #0]
 8003572:	0608      	lsls	r0, r1, #24
 8003574:	f853 5b04 	ldr.w	r5, [r3], #4
 8003578:	d402      	bmi.n	8003580 <_printf_i+0xe8>
 800357a:	0649      	lsls	r1, r1, #25
 800357c:	bf48      	it	mi
 800357e:	b2ad      	uxthmi	r5, r5
 8003580:	2f6f      	cmp	r7, #111	@ 0x6f
 8003582:	6033      	str	r3, [r6, #0]
 8003584:	bf14      	ite	ne
 8003586:	230a      	movne	r3, #10
 8003588:	2308      	moveq	r3, #8
 800358a:	4851      	ldr	r0, [pc, #324]	@ (80036d0 <_printf_i+0x238>)
 800358c:	2100      	movs	r1, #0
 800358e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003592:	6866      	ldr	r6, [r4, #4]
 8003594:	2e00      	cmp	r6, #0
 8003596:	bfa8      	it	ge
 8003598:	6821      	ldrge	r1, [r4, #0]
 800359a:	60a6      	str	r6, [r4, #8]
 800359c:	bfa4      	itt	ge
 800359e:	f021 0104 	bicge.w	r1, r1, #4
 80035a2:	6021      	strge	r1, [r4, #0]
 80035a4:	b90d      	cbnz	r5, 80035aa <_printf_i+0x112>
 80035a6:	2e00      	cmp	r6, #0
 80035a8:	d04b      	beq.n	8003642 <_printf_i+0x1aa>
 80035aa:	4616      	mov	r6, r2
 80035ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80035b0:	fb03 5711 	mls	r7, r3, r1, r5
 80035b4:	5dc7      	ldrb	r7, [r0, r7]
 80035b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80035ba:	462f      	mov	r7, r5
 80035bc:	42bb      	cmp	r3, r7
 80035be:	460d      	mov	r5, r1
 80035c0:	d9f4      	bls.n	80035ac <_printf_i+0x114>
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d10b      	bne.n	80035de <_printf_i+0x146>
 80035c6:	6823      	ldr	r3, [r4, #0]
 80035c8:	07df      	lsls	r7, r3, #31
 80035ca:	d508      	bpl.n	80035de <_printf_i+0x146>
 80035cc:	6923      	ldr	r3, [r4, #16]
 80035ce:	6861      	ldr	r1, [r4, #4]
 80035d0:	4299      	cmp	r1, r3
 80035d2:	bfde      	ittt	le
 80035d4:	2330      	movle	r3, #48	@ 0x30
 80035d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80035da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80035de:	1b92      	subs	r2, r2, r6
 80035e0:	6122      	str	r2, [r4, #16]
 80035e2:	464b      	mov	r3, r9
 80035e4:	4621      	mov	r1, r4
 80035e6:	4640      	mov	r0, r8
 80035e8:	f8cd a000 	str.w	sl, [sp]
 80035ec:	aa03      	add	r2, sp, #12
 80035ee:	f7ff fee1 	bl	80033b4 <_printf_common>
 80035f2:	3001      	adds	r0, #1
 80035f4:	d14a      	bne.n	800368c <_printf_i+0x1f4>
 80035f6:	f04f 30ff 	mov.w	r0, #4294967295
 80035fa:	b004      	add	sp, #16
 80035fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	f043 0320 	orr.w	r3, r3, #32
 8003606:	6023      	str	r3, [r4, #0]
 8003608:	2778      	movs	r7, #120	@ 0x78
 800360a:	4832      	ldr	r0, [pc, #200]	@ (80036d4 <_printf_i+0x23c>)
 800360c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	6831      	ldr	r1, [r6, #0]
 8003614:	061f      	lsls	r7, r3, #24
 8003616:	f851 5b04 	ldr.w	r5, [r1], #4
 800361a:	d402      	bmi.n	8003622 <_printf_i+0x18a>
 800361c:	065f      	lsls	r7, r3, #25
 800361e:	bf48      	it	mi
 8003620:	b2ad      	uxthmi	r5, r5
 8003622:	6031      	str	r1, [r6, #0]
 8003624:	07d9      	lsls	r1, r3, #31
 8003626:	bf44      	itt	mi
 8003628:	f043 0320 	orrmi.w	r3, r3, #32
 800362c:	6023      	strmi	r3, [r4, #0]
 800362e:	b11d      	cbz	r5, 8003638 <_printf_i+0x1a0>
 8003630:	2310      	movs	r3, #16
 8003632:	e7ab      	b.n	800358c <_printf_i+0xf4>
 8003634:	4826      	ldr	r0, [pc, #152]	@ (80036d0 <_printf_i+0x238>)
 8003636:	e7e9      	b.n	800360c <_printf_i+0x174>
 8003638:	6823      	ldr	r3, [r4, #0]
 800363a:	f023 0320 	bic.w	r3, r3, #32
 800363e:	6023      	str	r3, [r4, #0]
 8003640:	e7f6      	b.n	8003630 <_printf_i+0x198>
 8003642:	4616      	mov	r6, r2
 8003644:	e7bd      	b.n	80035c2 <_printf_i+0x12a>
 8003646:	6833      	ldr	r3, [r6, #0]
 8003648:	6825      	ldr	r5, [r4, #0]
 800364a:	1d18      	adds	r0, r3, #4
 800364c:	6961      	ldr	r1, [r4, #20]
 800364e:	6030      	str	r0, [r6, #0]
 8003650:	062e      	lsls	r6, r5, #24
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	d501      	bpl.n	800365a <_printf_i+0x1c2>
 8003656:	6019      	str	r1, [r3, #0]
 8003658:	e002      	b.n	8003660 <_printf_i+0x1c8>
 800365a:	0668      	lsls	r0, r5, #25
 800365c:	d5fb      	bpl.n	8003656 <_printf_i+0x1be>
 800365e:	8019      	strh	r1, [r3, #0]
 8003660:	2300      	movs	r3, #0
 8003662:	4616      	mov	r6, r2
 8003664:	6123      	str	r3, [r4, #16]
 8003666:	e7bc      	b.n	80035e2 <_printf_i+0x14a>
 8003668:	6833      	ldr	r3, [r6, #0]
 800366a:	2100      	movs	r1, #0
 800366c:	1d1a      	adds	r2, r3, #4
 800366e:	6032      	str	r2, [r6, #0]
 8003670:	681e      	ldr	r6, [r3, #0]
 8003672:	6862      	ldr	r2, [r4, #4]
 8003674:	4630      	mov	r0, r6
 8003676:	f000 f859 	bl	800372c <memchr>
 800367a:	b108      	cbz	r0, 8003680 <_printf_i+0x1e8>
 800367c:	1b80      	subs	r0, r0, r6
 800367e:	6060      	str	r0, [r4, #4]
 8003680:	6863      	ldr	r3, [r4, #4]
 8003682:	6123      	str	r3, [r4, #16]
 8003684:	2300      	movs	r3, #0
 8003686:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800368a:	e7aa      	b.n	80035e2 <_printf_i+0x14a>
 800368c:	4632      	mov	r2, r6
 800368e:	4649      	mov	r1, r9
 8003690:	4640      	mov	r0, r8
 8003692:	6923      	ldr	r3, [r4, #16]
 8003694:	47d0      	blx	sl
 8003696:	3001      	adds	r0, #1
 8003698:	d0ad      	beq.n	80035f6 <_printf_i+0x15e>
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	079b      	lsls	r3, r3, #30
 800369e:	d413      	bmi.n	80036c8 <_printf_i+0x230>
 80036a0:	68e0      	ldr	r0, [r4, #12]
 80036a2:	9b03      	ldr	r3, [sp, #12]
 80036a4:	4298      	cmp	r0, r3
 80036a6:	bfb8      	it	lt
 80036a8:	4618      	movlt	r0, r3
 80036aa:	e7a6      	b.n	80035fa <_printf_i+0x162>
 80036ac:	2301      	movs	r3, #1
 80036ae:	4632      	mov	r2, r6
 80036b0:	4649      	mov	r1, r9
 80036b2:	4640      	mov	r0, r8
 80036b4:	47d0      	blx	sl
 80036b6:	3001      	adds	r0, #1
 80036b8:	d09d      	beq.n	80035f6 <_printf_i+0x15e>
 80036ba:	3501      	adds	r5, #1
 80036bc:	68e3      	ldr	r3, [r4, #12]
 80036be:	9903      	ldr	r1, [sp, #12]
 80036c0:	1a5b      	subs	r3, r3, r1
 80036c2:	42ab      	cmp	r3, r5
 80036c4:	dcf2      	bgt.n	80036ac <_printf_i+0x214>
 80036c6:	e7eb      	b.n	80036a0 <_printf_i+0x208>
 80036c8:	2500      	movs	r5, #0
 80036ca:	f104 0619 	add.w	r6, r4, #25
 80036ce:	e7f5      	b.n	80036bc <_printf_i+0x224>
 80036d0:	08003863 	.word	0x08003863
 80036d4:	08003874 	.word	0x08003874

080036d8 <memmove>:
 80036d8:	4288      	cmp	r0, r1
 80036da:	b510      	push	{r4, lr}
 80036dc:	eb01 0402 	add.w	r4, r1, r2
 80036e0:	d902      	bls.n	80036e8 <memmove+0x10>
 80036e2:	4284      	cmp	r4, r0
 80036e4:	4623      	mov	r3, r4
 80036e6:	d807      	bhi.n	80036f8 <memmove+0x20>
 80036e8:	1e43      	subs	r3, r0, #1
 80036ea:	42a1      	cmp	r1, r4
 80036ec:	d008      	beq.n	8003700 <memmove+0x28>
 80036ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80036f6:	e7f8      	b.n	80036ea <memmove+0x12>
 80036f8:	4601      	mov	r1, r0
 80036fa:	4402      	add	r2, r0
 80036fc:	428a      	cmp	r2, r1
 80036fe:	d100      	bne.n	8003702 <memmove+0x2a>
 8003700:	bd10      	pop	{r4, pc}
 8003702:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003706:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800370a:	e7f7      	b.n	80036fc <memmove+0x24>

0800370c <_sbrk_r>:
 800370c:	b538      	push	{r3, r4, r5, lr}
 800370e:	2300      	movs	r3, #0
 8003710:	4d05      	ldr	r5, [pc, #20]	@ (8003728 <_sbrk_r+0x1c>)
 8003712:	4604      	mov	r4, r0
 8003714:	4608      	mov	r0, r1
 8003716:	602b      	str	r3, [r5, #0]
 8003718:	f7fd f860 	bl	80007dc <_sbrk>
 800371c:	1c43      	adds	r3, r0, #1
 800371e:	d102      	bne.n	8003726 <_sbrk_r+0x1a>
 8003720:	682b      	ldr	r3, [r5, #0]
 8003722:	b103      	cbz	r3, 8003726 <_sbrk_r+0x1a>
 8003724:	6023      	str	r3, [r4, #0]
 8003726:	bd38      	pop	{r3, r4, r5, pc}
 8003728:	2000027c 	.word	0x2000027c

0800372c <memchr>:
 800372c:	4603      	mov	r3, r0
 800372e:	b510      	push	{r4, lr}
 8003730:	b2c9      	uxtb	r1, r1
 8003732:	4402      	add	r2, r0
 8003734:	4293      	cmp	r3, r2
 8003736:	4618      	mov	r0, r3
 8003738:	d101      	bne.n	800373e <memchr+0x12>
 800373a:	2000      	movs	r0, #0
 800373c:	e003      	b.n	8003746 <memchr+0x1a>
 800373e:	7804      	ldrb	r4, [r0, #0]
 8003740:	3301      	adds	r3, #1
 8003742:	428c      	cmp	r4, r1
 8003744:	d1f6      	bne.n	8003734 <memchr+0x8>
 8003746:	bd10      	pop	{r4, pc}

08003748 <memcpy>:
 8003748:	440a      	add	r2, r1
 800374a:	4291      	cmp	r1, r2
 800374c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003750:	d100      	bne.n	8003754 <memcpy+0xc>
 8003752:	4770      	bx	lr
 8003754:	b510      	push	{r4, lr}
 8003756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800375a:	4291      	cmp	r1, r2
 800375c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003760:	d1f9      	bne.n	8003756 <memcpy+0xe>
 8003762:	bd10      	pop	{r4, pc}

08003764 <_realloc_r>:
 8003764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003768:	4680      	mov	r8, r0
 800376a:	4615      	mov	r5, r2
 800376c:	460c      	mov	r4, r1
 800376e:	b921      	cbnz	r1, 800377a <_realloc_r+0x16>
 8003770:	4611      	mov	r1, r2
 8003772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003776:	f7ff bc39 	b.w	8002fec <_malloc_r>
 800377a:	b92a      	cbnz	r2, 8003788 <_realloc_r+0x24>
 800377c:	f7ff fbcc 	bl	8002f18 <_free_r>
 8003780:	2400      	movs	r4, #0
 8003782:	4620      	mov	r0, r4
 8003784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003788:	f000 f81a 	bl	80037c0 <_malloc_usable_size_r>
 800378c:	4285      	cmp	r5, r0
 800378e:	4606      	mov	r6, r0
 8003790:	d802      	bhi.n	8003798 <_realloc_r+0x34>
 8003792:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003796:	d8f4      	bhi.n	8003782 <_realloc_r+0x1e>
 8003798:	4629      	mov	r1, r5
 800379a:	4640      	mov	r0, r8
 800379c:	f7ff fc26 	bl	8002fec <_malloc_r>
 80037a0:	4607      	mov	r7, r0
 80037a2:	2800      	cmp	r0, #0
 80037a4:	d0ec      	beq.n	8003780 <_realloc_r+0x1c>
 80037a6:	42b5      	cmp	r5, r6
 80037a8:	462a      	mov	r2, r5
 80037aa:	4621      	mov	r1, r4
 80037ac:	bf28      	it	cs
 80037ae:	4632      	movcs	r2, r6
 80037b0:	f7ff ffca 	bl	8003748 <memcpy>
 80037b4:	4621      	mov	r1, r4
 80037b6:	4640      	mov	r0, r8
 80037b8:	f7ff fbae 	bl	8002f18 <_free_r>
 80037bc:	463c      	mov	r4, r7
 80037be:	e7e0      	b.n	8003782 <_realloc_r+0x1e>

080037c0 <_malloc_usable_size_r>:
 80037c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037c4:	1f18      	subs	r0, r3, #4
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	bfbc      	itt	lt
 80037ca:	580b      	ldrlt	r3, [r1, r0]
 80037cc:	18c0      	addlt	r0, r0, r3
 80037ce:	4770      	bx	lr

080037d0 <_init>:
 80037d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d2:	bf00      	nop
 80037d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037d6:	bc08      	pop	{r3}
 80037d8:	469e      	mov	lr, r3
 80037da:	4770      	bx	lr

080037dc <_fini>:
 80037dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037de:	bf00      	nop
 80037e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037e2:	bc08      	pop	{r3}
 80037e4:	469e      	mov	lr, r3
 80037e6:	4770      	bx	lr
